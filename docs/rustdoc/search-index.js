var searchIndex = {};
searchIndex["nalgebra"] = {"doc":"nalgebra","items":[[8,"Real","nalgebra","Trait shared by all reals.",null,null],[10,"floor","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","",0,null],[10,"exp_m1","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","",0,{"inputs":[],"output":{"name":"self"}}],[3,"Id","","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[5,"id","","Gets the ubiquitous multiplicative identity element.",null,{"inputs":[],"output":{"name":"id"}}],[5,"one","","Gets the multiplicative identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Gets the additive identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Gets the origin of the given point.",null,{"inputs":[],"output":{"name":"p"}}],[5,"dimension","","The dimension of the given algebraic entity seen as a vector space.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"wrap","","Wraps `val` into the range `[min, max]` using modular arithmetics.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Returns a reference to the input value clamped to the interval `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"abs","","The absolute value of `a`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf_sup","","Returns simultaneously the infimum and supremum of `a` and `b`.",null,null],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"try_inverse","","Tries to gets an inverted copy of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"inverse","","Computes the multiplicative inverse of an (always invertible) algebraic entity.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"dot","","Computes the dot product of two vectors.",null,null],[5,"angle","","Computes the smallest angle between two vectors.",null,null],[5,"norm","","Computes the L2 (euclidean) norm of a vector.",null,null],[5,"norm_squared","","Computes the squared L2 (euclidean) norm of the vector `v`.",null,null],[5,"normalize","","Computes the normalized version of the vector `v`.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.",null,null],[5,"center","","The center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","The distance between two points.",null,null],[5,"distance_squared","","The squared distance between two points.",null,null],[5,"convert","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"is_convertible","","Indicates if `::try_convert` will succeed without actually performing the conversion.",null,{"inputs":[{"name":"from"}],"output":{"name":"bool"}}],[5,"convert_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"convert_ref","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert_ref","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"convert_ref_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[0,"core","","[Reexported at the root of this crate.] Data structures for vector and matrix computations.",null,null],[3,"Matrix","nalgebra::core","The most generic column-major matrix (and vector) type.",null,null],[12,"data","","The data storage that contains all the matrix components and informations about its number of rows and column (if needed).",1,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[3,"SliceStorage","","A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.",null,null],[3,"SliceStorageMut","","A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.",null,null],[3,"MatrixArray","","A array-based statically sized matrix data storage.",null,null],[3,"MatrixVec","","A Vec-based matrix data storage. It may be dynamically-sized.",null,null],[0,"dimension","","Traits and tags for identifying the dimension of all algebraic entities.",null,null],[3,"Dynamic","nalgebra::core::dimension","Dim of dynamically-sized algebraic entities.",null,null],[3,"U1","","",null,null],[3,"U0","","",null,null],[3,"U2","","",null,null],[3,"U3","","",null,null],[3,"U4","","",null,null],[3,"U5","","",null,null],[3,"U6","","",null,null],[3,"U7","","",null,null],[3,"U8","","",null,null],[3,"U9","","",null,null],[3,"U10","","",null,null],[3,"U11","","",null,null],[3,"U12","","",null,null],[3,"U13","","",null,null],[3,"U14","","",null,null],[3,"U15","","",null,null],[3,"U16","","",null,null],[3,"U17","","",null,null],[3,"U18","","",null,null],[3,"U19","","",null,null],[3,"U20","","",null,null],[3,"U21","","",null,null],[3,"U22","","",null,null],[3,"U23","","",null,null],[3,"U24","","",null,null],[3,"U25","","",null,null],[3,"U26","","",null,null],[3,"U27","","",null,null],[3,"U28","","",null,null],[3,"U29","","",null,null],[3,"U30","","",null,null],[3,"U31","","",null,null],[3,"U32","","",null,null],[3,"U33","","",null,null],[3,"U34","","",null,null],[3,"U35","","",null,null],[3,"U36","","",null,null],[3,"U37","","",null,null],[3,"U38","","",null,null],[3,"U39","","",null,null],[3,"U40","","",null,null],[3,"U41","","",null,null],[3,"U42","","",null,null],[3,"U43","","",null,null],[3,"U44","","",null,null],[3,"U45","","",null,null],[3,"U46","","",null,null],[3,"U47","","",null,null],[3,"U48","","",null,null],[3,"U49","","",null,null],[3,"U50","","",null,null],[3,"U51","","",null,null],[3,"U52","","",null,null],[3,"U53","","",null,null],[3,"U54","","",null,null],[3,"U55","","",null,null],[3,"U56","","",null,null],[3,"U57","","",null,null],[3,"U58","","",null,null],[3,"U59","","",null,null],[3,"U60","","",null,null],[3,"U61","","",null,null],[3,"U62","","",null,null],[3,"U63","","",null,null],[3,"U64","","",null,null],[3,"U65","","",null,null],[3,"U66","","",null,null],[3,"U67","","",null,null],[3,"U68","","",null,null],[3,"U69","","",null,null],[3,"U70","","",null,null],[3,"U71","","",null,null],[3,"U72","","",null,null],[3,"U73","","",null,null],[3,"U74","","",null,null],[3,"U75","","",null,null],[3,"U76","","",null,null],[3,"U77","","",null,null],[3,"U78","","",null,null],[3,"U79","","",null,null],[3,"U80","","",null,null],[3,"U81","","",null,null],[3,"U82","","",null,null],[3,"U83","","",null,null],[3,"U84","","",null,null],[3,"U85","","",null,null],[3,"U86","","",null,null],[3,"U87","","",null,null],[3,"U88","","",null,null],[3,"U89","","",null,null],[3,"U90","","",null,null],[3,"U91","","",null,null],[3,"U92","","",null,null],[3,"U93","","",null,null],[3,"U94","","",null,null],[3,"U95","","",null,null],[3,"U96","","",null,null],[3,"U97","","",null,null],[3,"U98","","",null,null],[3,"U99","","",null,null],[3,"U100","","",null,null],[3,"U101","","",null,null],[3,"U102","","",null,null],[3,"U103","","",null,null],[3,"U104","","",null,null],[3,"U105","","",null,null],[3,"U106","","",null,null],[3,"U107","","",null,null],[3,"U108","","",null,null],[3,"U109","","",null,null],[3,"U110","","",null,null],[3,"U111","","",null,null],[3,"U112","","",null,null],[3,"U113","","",null,null],[3,"U114","","",null,null],[3,"U115","","",null,null],[3,"U116","","",null,null],[3,"U117","","",null,null],[3,"U118","","",null,null],[3,"U119","","",null,null],[3,"U120","","",null,null],[3,"U121","","",null,null],[3,"U122","","",null,null],[3,"U123","","",null,null],[3,"U124","","",null,null],[3,"U125","","",null,null],[3,"U126","","",null,null],[3,"U127","","",null,null],[6,"DimSum","","",null,null],[6,"DimNameSum","","",null,null],[6,"DimProd","","",null,null],[6,"DimNameProd","","",null,null],[6,"DimDiff","","",null,null],[6,"DimNameDiff","","",null,null],[6,"DimQuot","","",null,null],[6,"DimNameQuot","","",null,null],[6,"DimMinimum","","",null,null],[6,"DimNameNimimum","","",null,null],[6,"DimMaximum","","",null,null],[6,"DimNameMaximum","","",null,null],[8,"IsDynamic","","Trait implemented by `Dynamic`.",null,null],[8,"IsNotStaticOne","","Trait implemented by `Dynamic` and type-level integers different from `U1`.",null,null],[8,"Dim","","Trait implemented by any type that can be used as a dimension. This includes type-level integers and `Dynamic` (for dimensions not known at compile-time).",null,null],[11,"is","","",2,{"inputs":[],"output":{"name":"bool"}}],[10,"try_to_usize","","Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self = Dynamic`.",2,{"inputs":[],"output":{"name":"option"}}],[10,"value","","Gets the run-time value of `self`. For type-level integers, this is the same as `Self::try_to_usize().unwrap()`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level integer and `dim != Self::try_to_usize().unwrap()`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"DimAdd","","",null,null],[16,"Output","","",3,null],[10,"add","","",3,null],[8,"DimNameAdd","","",null,null],[16,"Output","","",4,null],[10,"add","","",4,null],[8,"DimMul","","",null,null],[16,"Output","","",5,null],[10,"mul","","",5,null],[8,"DimNameMul","","",null,null],[16,"Output","","",6,null],[10,"mul","","",6,null],[8,"DimSub","","",null,null],[16,"Output","","",7,null],[10,"sub","","",7,null],[8,"DimNameSub","","",null,null],[16,"Output","","",8,null],[10,"sub","","",8,null],[8,"DimDiv","","",null,null],[16,"Output","","",9,null],[10,"div","","",9,null],[8,"DimNameDiv","","",null,null],[16,"Output","","",10,null],[10,"div","","",10,null],[8,"DimMin","","",null,null],[16,"Output","","",11,null],[10,"min","","",11,null],[8,"DimNameMin","","",null,null],[16,"Output","","",12,null],[10,"min","","",12,null],[8,"DimMax","","",null,null],[16,"Output","","",13,null],[10,"max","","",13,null],[8,"DimNameMax","","",null,null],[16,"Output","","",14,null],[10,"max","","",14,null],[8,"DimName","","Trait implemented exclusively by type-level integers.",null,null],[16,"Value","","",15,null],[10,"name","","The name of this dimension, i.e., the singleton `Self`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"dim","","The value of this dimension.",15,{"inputs":[],"output":{"name":"usize"}}],[8,"NamedDim","","",null,null],[16,"Name","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A dynamic size equal to `value`.",17,{"inputs":[{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"try_to_usize","","",17,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"min","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"max","","",17,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u1"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"u1"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",18,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u0"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"u0"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",19,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u2"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"u2"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",20,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u3"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"u3"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",21,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u4"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"u4"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",22,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u5"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"u5"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",23,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u6"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"u6"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",24,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u7"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"u7"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",25,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",25,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",26,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u9"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"u9"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",27,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u10"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"u10"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",28,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u11"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"u11"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",29,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u12"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"u12"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",30,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u13"}}],[11,"hash","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"u13"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",31,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u14"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u14"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",32,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u15"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"u15"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u17"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"u17"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",35,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u18"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u18"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",36,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u19"}}],[11,"hash","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"u19"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",37,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u20"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"u20"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",38,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",38,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u21"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"u21"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",39,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u22"}}],[11,"hash","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"u22"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",40,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u23"}}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"u23"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",41,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u24"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"u24"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",42,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u25"}}],[11,"hash","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"u25"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",43,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u26"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"u26"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",44,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u27"}}],[11,"hash","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"u27"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",45,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u28"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"u28"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",46,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u29"}}],[11,"hash","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u29"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",47,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",47,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u30"}}],[11,"hash","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"u30"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",48,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u31"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"u31"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",49,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",50,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u33"}}],[11,"hash","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"u33"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u34"}}],[11,"hash","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"u34"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",52,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u35"}}],[11,"hash","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"u35"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",53,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u36"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"u36"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",54,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u37"}}],[11,"hash","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"u37"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",55,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u38"}}],[11,"hash","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"u38"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",56,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u39"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"u39"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u40"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"u40"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",58,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u41"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"u41"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",59,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",59,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u42"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"u42"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",60,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u43"}}],[11,"hash","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"u43"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",61,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u44"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"u44"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",62,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",62,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u45"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"u45"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",63,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u46"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"u46"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",64,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",64,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u47"}}],[11,"hash","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"u47"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",65,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u48"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"u48"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",66,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",66,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",66,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u49"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"u49"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",67,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",67,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u50"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"u50"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",68,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u51"}}],[11,"hash","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"u51"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",69,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",69,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u52"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"u52"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",70,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u53"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"u53"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",71,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",71,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u54"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"u54"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",72,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u55"}}],[11,"hash","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"u55"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",73,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",73,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u56"}}],[11,"hash","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"u56"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",74,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",74,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u57"}}],[11,"hash","","",75,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"u57"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",75,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u58"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"u58"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",76,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u59"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"u59"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",77,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",77,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u60"}}],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"u60"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",78,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u61"}}],[11,"hash","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"u61"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",79,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",79,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u62"}}],[11,"hash","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"u62"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",80,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",80,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u63"}}],[11,"hash","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"u63"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",81,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",81,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",82,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",82,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u65"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"u65"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",83,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u66"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"u66"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",84,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u67"}}],[11,"hash","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"u67"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",85,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",85,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u68"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"u68"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",86,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",86,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u69"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"u69"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",87,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u70"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"u70"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",88,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u71"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"u71"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",89,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",89,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u72"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"u72"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",90,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",90,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u73"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"u73"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",91,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u74"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"u74"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",92,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",92,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u75"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"u75"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",93,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",93,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u76"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"u76"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",94,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u77"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"u77"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",95,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u78"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"u78"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",96,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",96,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u79"}}],[11,"hash","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"u79"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",97,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u80"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"u80"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",98,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u81"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"u81"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",99,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",99,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u82"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"u82"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",100,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",100,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u83"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"u83"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",101,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",101,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u84"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"u84"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",102,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",102,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u85"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"u85"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",103,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u86"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"u86"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",104,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",104,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u87"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"u87"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",105,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",105,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u88"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"u88"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",106,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u89"}}],[11,"hash","","",107,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"u89"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",107,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",107,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u90"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"u90"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",108,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",108,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u91"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"u91"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",109,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u92"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"u92"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",110,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",110,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"u93"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"u93"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",111,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",111,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u94"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"u94"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",112,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",112,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u95"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"u95"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",113,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",113,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u96"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"u96"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",114,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",114,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u97"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"u97"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",115,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"u98"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"u98"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",116,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",116,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u99"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"u99"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",117,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",117,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u100"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"u100"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",118,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",118,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u101"}}],[11,"hash","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"u101"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",119,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",119,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u102"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"u102"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",120,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u103"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"u103"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",121,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u104"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"u104"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",122,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",122,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u105"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"u105"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",123,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",123,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u106"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"u106"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",124,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",124,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u107"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"u107"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",125,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",125,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u108"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"u108"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",126,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",126,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u109"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"u109"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",127,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",127,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u110"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"u110"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",128,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",128,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u111"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"u111"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",129,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",129,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u112"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"u112"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",130,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",130,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u113"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"u113"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",131,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",131,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u114"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"u114"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",132,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",132,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u115"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"u115"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",133,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",133,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u116"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"u116"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",134,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",134,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u117"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"u117"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",135,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",135,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u118"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"u118"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",136,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",136,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u119"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"u119"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",137,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",137,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u120"}}],[11,"hash","","",138,null],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"u120"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",138,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",138,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"u121"}}],[11,"hash","","",139,null],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"u121"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",139,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",139,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u122"}}],[11,"hash","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"u122"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",140,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",140,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u123"}}],[11,"hash","","",141,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"u123"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",141,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",141,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u124"}}],[11,"hash","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"u124"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",142,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",142,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",142,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"u125"}}],[11,"hash","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"u125"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",143,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",143,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u126"}}],[11,"hash","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"u126"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",144,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",144,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",144,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u127"}}],[11,"hash","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"u127"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",145,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",145,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",145,{"inputs":[],"output":{"name":"self"}}],[0,"constraint","nalgebra::core","Compatibility constraints between matrix shapes, e.g., for addition or multiplication.",null,null],[3,"ShapeConstraint","nalgebra::core::constraint","A type used in `where` clauses for enforcing constraints.",null,null],[8,"AreMultipliable","","Constraints `C1` and `R2` to be equivalent.",null,null],[8,"DimEq","","Constraints `D1` and `D2` to be equivalent.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",146,null],[8,"SameNumberOfRows","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",147,null],[8,"SameNumberOfColumns","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",148,null],[8,"SameDimension","","Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic entities (e.g. square matrices).",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",149,null],[0,"allocator","nalgebra::core","Abstract definition of a matrix data storage allocator.",null,null],[6,"SameShapeR","nalgebra::core::allocator","The number of rows of the result of a componentwise operation on two matrices.",null,null],[6,"SameShapeC","","The number of columns of the result of a componentwise operation on two matrices.",null,null],[8,"Allocator","","A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()` elements of type `N`.",null,null],[16,"Buffer","","The type of buffer this allocator can instanciate.",150,null],[10,"allocate_uninitialized","","Allocates a buffer with the given number of rows and columns without initializing its content.",150,null],[10,"allocate_from_iterator","","Allocates a buffer initialized with the content of the given iterator.",150,null],[8,"Reallocator","","A matrix reallocator. Changes the size of the memory buffer that initially contains (RFrom × CFrom) elements to a smaller or larger size (RTo, CTo).",null,null],[10,"reallocate_copy","","Reallocates a buffer of shape `(RTo, CTo)`, possibly reusing a previously allocated buffer `buf`. Data stored by `buf` are linearly copied to the output:",151,null],[8,"SameShapeAllocator","","Restricts the given number of rows and columns to be respectively the same.",null,null],[8,"SameShapeVectorAllocator","","Restricts the given number of rows to be equal.",null,null],[0,"storage","nalgebra::core","Abstract definition of a matrix data storage.",null,null],[6,"SameShapeStorage","nalgebra::core::storage","The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.",null,null],[6,"Owned","","The owned data storage that can be allocated from `S`.",null,null],[6,"RStride","","The row-stride of the owned data storage for a buffer of dimension `(R, C)`.",null,null],[6,"CStride","","The column-stride of the owned data storage for a buffer of dimension `(R, C)`.",null,null],[8,"Storage","","The trait shared by all matrix data storage.",null,null],[16,"RStride","","The static stride of this storage's rows.",152,null],[16,"CStride","","The static stride of this storage's columns.",152,null],[10,"ptr","","The matrix data pointer.",152,null],[10,"shape","","The dimension of the matrix at run-time. Arr length of zero indicates the additive identity element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.",152,null],[10,"strides","","The spacing between concecutive row elements and consecutive column elements.",152,null],[11,"linear_index","","Compute the index corresponding to the irow-th row and icol-th column of this matrix. The index must be such that the following holds:",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_address_unchecked_linear","","Gets the address of the i-th matrix component without performing bound-checking.",152,null],[11,"get_address_unchecked","","Gets the address of the i-th matrix component without performing bound-checking.",152,null],[11,"get_unchecked_linear","","Retrieves a reference to the i-th element without bound-checking.",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked","","Retrieves a reference to the i-th element without bound-checking.",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[10,"is_contiguous","","Indicates whether this data buffer stores its elements contiguously.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"as_slice","","Retrieves the data buffer as a contiguous slice.",152,null],[10,"into_owned","","Builds a matrix data storage that does not contain any reference.",152,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"clone_owned","","Clones this data storage to one that does not contain any reference.",152,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[8,"StorageMut","","Trait implemented by matrix data storage that can provide a mutable access to its elements.",null,null],[10,"ptr_mut","","The matrix mutable data pointer.",153,null],[11,"get_address_unchecked_linear_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",153,null],[11,"get_address_unchecked_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",153,null],[11,"get_unchecked_linear_mut","","Retrieves a mutable reference to the i-th element without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked_mut","","Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked_linear","","Swaps two elements using their linear index without bound-checking.",153,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_unchecked","","Swaps two elements without bound-checking.",153,null],[10,"as_mut_slice","","Retrieves the mutable data buffer as a contiguous slice.",153,null],[8,"ContiguousStorage","","A matrix storage that is stored contiguously in memory.",null,null],[8,"ContiguousStorageMut","","A mutable matrix storage that is stored contiguously in memory.",null,null],[0,"coordinates","nalgebra::core","Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead of `v[2]`.",null,null],[3,"X","nalgebra::core::coordinates","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",154,null],[3,"XY","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",155,null],[12,"y","","",155,null],[3,"XYZ","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",156,null],[12,"y","","",156,null],[12,"z","","",156,null],[3,"XYZW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",157,null],[12,"y","","",157,null],[12,"z","","",157,null],[12,"w","","",157,null],[3,"XYZWA","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",158,null],[12,"y","","",158,null],[12,"z","","",158,null],[12,"w","","",158,null],[12,"a","","",158,null],[3,"XYZWAB","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",159,null],[12,"y","","",159,null],[12,"z","","",159,null],[12,"w","","",159,null],[12,"a","","",159,null],[12,"b","","",159,null],[3,"IJKW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"i","","",160,null],[12,"j","","",160,null],[12,"k","","",160,null],[12,"w","","",160,null],[3,"M2x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",161,null],[12,"m21","","",161,null],[12,"m12","","",161,null],[12,"m22","","",161,null],[3,"M2x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",162,null],[12,"m21","","",162,null],[12,"m12","","",162,null],[12,"m22","","",162,null],[12,"m13","","",162,null],[12,"m23","","",162,null],[3,"M2x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",163,null],[12,"m21","","",163,null],[12,"m12","","",163,null],[12,"m22","","",163,null],[12,"m13","","",163,null],[12,"m23","","",163,null],[12,"m14","","",163,null],[12,"m24","","",163,null],[3,"M2x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",164,null],[12,"m21","","",164,null],[12,"m12","","",164,null],[12,"m22","","",164,null],[12,"m13","","",164,null],[12,"m23","","",164,null],[12,"m14","","",164,null],[12,"m24","","",164,null],[12,"m15","","",164,null],[12,"m25","","",164,null],[3,"M2x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",165,null],[12,"m21","","",165,null],[12,"m12","","",165,null],[12,"m22","","",165,null],[12,"m13","","",165,null],[12,"m23","","",165,null],[12,"m14","","",165,null],[12,"m24","","",165,null],[12,"m15","","",165,null],[12,"m25","","",165,null],[12,"m16","","",165,null],[12,"m26","","",165,null],[3,"M3x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",166,null],[12,"m21","","",166,null],[12,"m31","","",166,null],[12,"m12","","",166,null],[12,"m22","","",166,null],[12,"m32","","",166,null],[3,"M3x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",167,null],[12,"m21","","",167,null],[12,"m31","","",167,null],[12,"m12","","",167,null],[12,"m22","","",167,null],[12,"m32","","",167,null],[12,"m13","","",167,null],[12,"m23","","",167,null],[12,"m33","","",167,null],[3,"M3x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",168,null],[12,"m21","","",168,null],[12,"m31","","",168,null],[12,"m12","","",168,null],[12,"m22","","",168,null],[12,"m32","","",168,null],[12,"m13","","",168,null],[12,"m23","","",168,null],[12,"m33","","",168,null],[12,"m14","","",168,null],[12,"m24","","",168,null],[12,"m34","","",168,null],[3,"M3x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",169,null],[12,"m21","","",169,null],[12,"m31","","",169,null],[12,"m12","","",169,null],[12,"m22","","",169,null],[12,"m32","","",169,null],[12,"m13","","",169,null],[12,"m23","","",169,null],[12,"m33","","",169,null],[12,"m14","","",169,null],[12,"m24","","",169,null],[12,"m34","","",169,null],[12,"m15","","",169,null],[12,"m25","","",169,null],[12,"m35","","",169,null],[3,"M3x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",170,null],[12,"m21","","",170,null],[12,"m31","","",170,null],[12,"m12","","",170,null],[12,"m22","","",170,null],[12,"m32","","",170,null],[12,"m13","","",170,null],[12,"m23","","",170,null],[12,"m33","","",170,null],[12,"m14","","",170,null],[12,"m24","","",170,null],[12,"m34","","",170,null],[12,"m15","","",170,null],[12,"m25","","",170,null],[12,"m35","","",170,null],[12,"m16","","",170,null],[12,"m26","","",170,null],[12,"m36","","",170,null],[3,"M4x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",171,null],[12,"m21","","",171,null],[12,"m31","","",171,null],[12,"m41","","",171,null],[12,"m12","","",171,null],[12,"m22","","",171,null],[12,"m32","","",171,null],[12,"m42","","",171,null],[3,"M4x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",172,null],[12,"m21","","",172,null],[12,"m31","","",172,null],[12,"m41","","",172,null],[12,"m12","","",172,null],[12,"m22","","",172,null],[12,"m32","","",172,null],[12,"m42","","",172,null],[12,"m13","","",172,null],[12,"m23","","",172,null],[12,"m33","","",172,null],[12,"m43","","",172,null],[3,"M4x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",173,null],[12,"m21","","",173,null],[12,"m31","","",173,null],[12,"m41","","",173,null],[12,"m12","","",173,null],[12,"m22","","",173,null],[12,"m32","","",173,null],[12,"m42","","",173,null],[12,"m13","","",173,null],[12,"m23","","",173,null],[12,"m33","","",173,null],[12,"m43","","",173,null],[12,"m14","","",173,null],[12,"m24","","",173,null],[12,"m34","","",173,null],[12,"m44","","",173,null],[3,"M4x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",174,null],[12,"m21","","",174,null],[12,"m31","","",174,null],[12,"m41","","",174,null],[12,"m12","","",174,null],[12,"m22","","",174,null],[12,"m32","","",174,null],[12,"m42","","",174,null],[12,"m13","","",174,null],[12,"m23","","",174,null],[12,"m33","","",174,null],[12,"m43","","",174,null],[12,"m14","","",174,null],[12,"m24","","",174,null],[12,"m34","","",174,null],[12,"m44","","",174,null],[12,"m15","","",174,null],[12,"m25","","",174,null],[12,"m35","","",174,null],[12,"m45","","",174,null],[3,"M4x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",175,null],[12,"m21","","",175,null],[12,"m31","","",175,null],[12,"m41","","",175,null],[12,"m12","","",175,null],[12,"m22","","",175,null],[12,"m32","","",175,null],[12,"m42","","",175,null],[12,"m13","","",175,null],[12,"m23","","",175,null],[12,"m33","","",175,null],[12,"m43","","",175,null],[12,"m14","","",175,null],[12,"m24","","",175,null],[12,"m34","","",175,null],[12,"m44","","",175,null],[12,"m15","","",175,null],[12,"m25","","",175,null],[12,"m35","","",175,null],[12,"m45","","",175,null],[12,"m16","","",175,null],[12,"m26","","",175,null],[12,"m36","","",175,null],[12,"m46","","",175,null],[3,"M5x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",176,null],[12,"m21","","",176,null],[12,"m31","","",176,null],[12,"m41","","",176,null],[12,"m51","","",176,null],[12,"m12","","",176,null],[12,"m22","","",176,null],[12,"m32","","",176,null],[12,"m42","","",176,null],[12,"m52","","",176,null],[3,"M5x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",177,null],[12,"m21","","",177,null],[12,"m31","","",177,null],[12,"m41","","",177,null],[12,"m51","","",177,null],[12,"m12","","",177,null],[12,"m22","","",177,null],[12,"m32","","",177,null],[12,"m42","","",177,null],[12,"m52","","",177,null],[12,"m13","","",177,null],[12,"m23","","",177,null],[12,"m33","","",177,null],[12,"m43","","",177,null],[12,"m53","","",177,null],[3,"M5x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",178,null],[12,"m21","","",178,null],[12,"m31","","",178,null],[12,"m41","","",178,null],[12,"m51","","",178,null],[12,"m12","","",178,null],[12,"m22","","",178,null],[12,"m32","","",178,null],[12,"m42","","",178,null],[12,"m52","","",178,null],[12,"m13","","",178,null],[12,"m23","","",178,null],[12,"m33","","",178,null],[12,"m43","","",178,null],[12,"m53","","",178,null],[12,"m14","","",178,null],[12,"m24","","",178,null],[12,"m34","","",178,null],[12,"m44","","",178,null],[12,"m54","","",178,null],[3,"M5x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",179,null],[12,"m21","","",179,null],[12,"m31","","",179,null],[12,"m41","","",179,null],[12,"m51","","",179,null],[12,"m12","","",179,null],[12,"m22","","",179,null],[12,"m32","","",179,null],[12,"m42","","",179,null],[12,"m52","","",179,null],[12,"m13","","",179,null],[12,"m23","","",179,null],[12,"m33","","",179,null],[12,"m43","","",179,null],[12,"m53","","",179,null],[12,"m14","","",179,null],[12,"m24","","",179,null],[12,"m34","","",179,null],[12,"m44","","",179,null],[12,"m54","","",179,null],[12,"m15","","",179,null],[12,"m25","","",179,null],[12,"m35","","",179,null],[12,"m45","","",179,null],[12,"m55","","",179,null],[3,"M5x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",180,null],[12,"m21","","",180,null],[12,"m31","","",180,null],[12,"m41","","",180,null],[12,"m51","","",180,null],[12,"m12","","",180,null],[12,"m22","","",180,null],[12,"m32","","",180,null],[12,"m42","","",180,null],[12,"m52","","",180,null],[12,"m13","","",180,null],[12,"m23","","",180,null],[12,"m33","","",180,null],[12,"m43","","",180,null],[12,"m53","","",180,null],[12,"m14","","",180,null],[12,"m24","","",180,null],[12,"m34","","",180,null],[12,"m44","","",180,null],[12,"m54","","",180,null],[12,"m15","","",180,null],[12,"m25","","",180,null],[12,"m35","","",180,null],[12,"m45","","",180,null],[12,"m55","","",180,null],[12,"m16","","",180,null],[12,"m26","","",180,null],[12,"m36","","",180,null],[12,"m46","","",180,null],[12,"m56","","",180,null],[3,"M6x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",181,null],[12,"m21","","",181,null],[12,"m31","","",181,null],[12,"m41","","",181,null],[12,"m51","","",181,null],[12,"m61","","",181,null],[12,"m12","","",181,null],[12,"m22","","",181,null],[12,"m32","","",181,null],[12,"m42","","",181,null],[12,"m52","","",181,null],[12,"m62","","",181,null],[3,"M6x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",182,null],[12,"m21","","",182,null],[12,"m31","","",182,null],[12,"m41","","",182,null],[12,"m51","","",182,null],[12,"m61","","",182,null],[12,"m12","","",182,null],[12,"m22","","",182,null],[12,"m32","","",182,null],[12,"m42","","",182,null],[12,"m52","","",182,null],[12,"m62","","",182,null],[12,"m13","","",182,null],[12,"m23","","",182,null],[12,"m33","","",182,null],[12,"m43","","",182,null],[12,"m53","","",182,null],[12,"m63","","",182,null],[3,"M6x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",183,null],[12,"m21","","",183,null],[12,"m31","","",183,null],[12,"m41","","",183,null],[12,"m51","","",183,null],[12,"m61","","",183,null],[12,"m12","","",183,null],[12,"m22","","",183,null],[12,"m32","","",183,null],[12,"m42","","",183,null],[12,"m52","","",183,null],[12,"m62","","",183,null],[12,"m13","","",183,null],[12,"m23","","",183,null],[12,"m33","","",183,null],[12,"m43","","",183,null],[12,"m53","","",183,null],[12,"m63","","",183,null],[12,"m14","","",183,null],[12,"m24","","",183,null],[12,"m34","","",183,null],[12,"m44","","",183,null],[12,"m54","","",183,null],[12,"m64","","",183,null],[3,"M6x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",184,null],[12,"m21","","",184,null],[12,"m31","","",184,null],[12,"m41","","",184,null],[12,"m51","","",184,null],[12,"m61","","",184,null],[12,"m12","","",184,null],[12,"m22","","",184,null],[12,"m32","","",184,null],[12,"m42","","",184,null],[12,"m52","","",184,null],[12,"m62","","",184,null],[12,"m13","","",184,null],[12,"m23","","",184,null],[12,"m33","","",184,null],[12,"m43","","",184,null],[12,"m53","","",184,null],[12,"m63","","",184,null],[12,"m14","","",184,null],[12,"m24","","",184,null],[12,"m34","","",184,null],[12,"m44","","",184,null],[12,"m54","","",184,null],[12,"m64","","",184,null],[12,"m15","","",184,null],[12,"m25","","",184,null],[12,"m35","","",184,null],[12,"m45","","",184,null],[12,"m55","","",184,null],[12,"m65","","",184,null],[3,"M6x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",185,null],[12,"m21","","",185,null],[12,"m31","","",185,null],[12,"m41","","",185,null],[12,"m51","","",185,null],[12,"m61","","",185,null],[12,"m12","","",185,null],[12,"m22","","",185,null],[12,"m32","","",185,null],[12,"m42","","",185,null],[12,"m52","","",185,null],[12,"m62","","",185,null],[12,"m13","","",185,null],[12,"m23","","",185,null],[12,"m33","","",185,null],[12,"m43","","",185,null],[12,"m53","","",185,null],[12,"m63","","",185,null],[12,"m14","","",185,null],[12,"m24","","",185,null],[12,"m34","","",185,null],[12,"m44","","",185,null],[12,"m54","","",185,null],[12,"m64","","",185,null],[12,"m15","","",185,null],[12,"m25","","",185,null],[12,"m35","","",185,null],[12,"m45","","",185,null],[12,"m55","","",185,null],[12,"m65","","",185,null],[12,"m16","","",185,null],[12,"m26","","",185,null],[12,"m36","","",185,null],[12,"m46","","",185,null],[12,"m56","","",185,null],[12,"m66","","",185,null],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"xy"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"xyzw"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"xyzwa"}}],[11,"hash","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"xyzwab"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"ijkw"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"m2x2"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"m2x3"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"m2x4"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"m2x5"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"m2x6"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"m3x2"}}],[11,"hash","","",166,null],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"m3x3"}}],[11,"hash","","",167,null],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"m3x4"}}],[11,"hash","","",168,null],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"m3x5"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"m3x6"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"m4x2"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"m4x3"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"m4x4"}}],[11,"hash","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"m4x5"}}],[11,"hash","","",174,null],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"m4x6"}}],[11,"hash","","",175,null],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"m5x2"}}],[11,"hash","","",176,null],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"m5x3"}}],[11,"hash","","",177,null],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"m5x4"}}],[11,"hash","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"m5x5"}}],[11,"hash","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"m5x6"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"m6x2"}}],[11,"hash","","",181,null],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"m6x3"}}],[11,"hash","","",182,null],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"m6x4"}}],[11,"hash","","",183,null],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"m6x5"}}],[11,"hash","","",184,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"m6x6"}}],[11,"hash","","",185,null],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","nalgebra::core","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index","","",1,null],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",1,null],[11,"neg","","",1,null],[11,"neg_mut","","Negates `self` in-place.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"add_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"add","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"sub","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul","","",1,null],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",1,null],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_mul","","Equivalent to `self.transpose() * rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixmn"}}],[11,"tr_mul_to","","Equivalent to `self.transpose() * rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"mul_to","","Equivalent to `self * rhs` but stores the result into `out` to avoid allocations.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"kronecker","","The kronecker product of two matrices (aka. tensor product of the corresponding linear maps).",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixmn"}}],[11,"add_scalar","","Adds a scalar to `self`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"add_scalar_mut","","Adds a scalar to `self` in-place.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"amax","","Returns the absolute value of the coefficient with the largest absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"amin","","Returns the absolute value of the coefficient with the smallest absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"iamax_full","","Computes the index of the matrix component with the largest absolute value.",1,null],[11,"dot","","The dot product between two matrices (seen as vectors).",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"tr_dot","","The dot product between the transpose of `self` and `rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"ger","","Computes `self = alpha * x * y.transpose() + beta * self`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemm","","Computes `self = alpha * a * b + beta * self`, where `a, b, self` are matrices. `alpha` and `beta` are scalar.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"matrix"},{"name":"n"}],"output":null}],[11,"ger_symm","","Computes `self = alpha * x * y.transpose() + beta * self`, where `self` is a symmetric matrix.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":null}],[0,"iter","","Matrix iterators.",null,null],[3,"MatrixIter","nalgebra::core::iter","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[3,"MatrixIterMut","","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[11,"new","","Creates a new iterator for the given matrix storage.",186,{"inputs":[{"name":"s"}],"output":{"name":"matrixiter"}}],[11,"next","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"count","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",186,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new iterator for the given matrix storage.",187,{"inputs":[{"name":"s"}],"output":{"name":"matrixitermut"}}],[11,"next","","",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"count","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",187,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"default_allocator","nalgebra::core","The default matrix data storage allocator.",null,null],[3,"DefaultAllocator","nalgebra::core::default_allocator","An allocator based on `GenericArray` and `MatrixVec` for statically-sized and dynamically-sized matrices respectively.",null,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"allocate_uninitialized","","",188,null],[11,"allocate_from_iterator","","",188,null],[11,"reallocate_copy","","",188,null],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"name":"matrixarray"}],"output":{"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"name":"matrixarray"}],"output":{"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"name":"matrixvec"}],"output":{"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"name":"matrixvec"}],"output":{"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"dynamic"},{"name":"cto"},{"name":"matrixvec"}],"output":{"name":"matrixvec"}}],[11,"reallocate_copy","","",188,{"inputs":[{"name":"rto"},{"name":"dynamic"},{"name":"matrixvec"}],"output":{"name":"matrixvec"}}],[11,"hash","nalgebra::core","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_data_statically_unchecked","","Creates a new matrix with the given data without statically checking that the matrix dimension matches the storage dimension.",1,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"from_data","","Creates a new matrix with the given data.",1,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"len","","The total number of elements of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shape","","The shape of this matrix returned as the tuple (number of rows, number of columns).",1,null],[11,"nrows","","The number of rows of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strides","","The strides (row stride, column stride) of this matrix.",1,null],[11,"iter","","Iterates through this matrix coordinates.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"vector_to_matrix_index","","Computes the row and column coordinates of the i-th element of this matrix seen as a vector.",1,null],[11,"get_unchecked","","Gets a reference to the element of this matrix at row `irow` and column `icol` without bound-checking.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"relative_eq","","Tests whether `self` and `rhs` are equal up to a given epsilon.",1,null],[11,"eq","","Tests whether `self` and `rhs` are exactly equal.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"into_owned","","Moves this matrix into one that owns its data.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"into_owned_sum","","Moves this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"clone_owned","","Clones this matrix to one that owns its data.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"clone_owned_sum","","Clones this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"map","","Returns a matrix containing the result of `f` applied to each of its entries.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"matrixmn"}}],[11,"zip_map","","Returns a matrix containing the result of `f` applied to each entries of `self` and `rhs`.",1,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"f"}],"output":{"name":"matrixmn"}}],[11,"transpose_to","","Transposes `self` and store the result into `out`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"transpose","","Transposes `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"iter_mut","","Mutably iterates through this matrix coordinates.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",1,null],[11,"swap","","Swaps two entries.",1,null],[11,"copy_from","","Fills this matrix with the content of another one. Both must have the same shape.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_copy_from","","Fills this matrix with the content of the transpose another one.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"apply","","Replaces each component of `self` by the result of a closure `f` applied on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire matrix entries ordered column-by-columns.",1,null],[11,"as_mut_slice","","Extracts a mutable slice containing the entire matrix entries ordered column-by-columns.",1,null],[11,"transpose_mut","","Transposes the square matrix `self` in-place.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"conjugate_transpose_to","","Takes the conjugate and transposes `self` and store the result into `out`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"conjugate_transpose","","The conjugate transposition of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"conjugate_transpose_mut","","Sets `self` to its conjugate transpose.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default_epsilon","","",1,null],[11,"default_max_relative","","",1,null],[11,"default_max_ulps","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",1,null],[11,"ulps_eq","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"perp","","The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"cross","","The 3D cross product between two vectors.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixcross"}}],[11,"angle","","The smallest angle between two vectors.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared L2 norm of this vector.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","The L2 norm of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Returns a normalized version of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"try_normalize","","Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"normalize_mut","","Normalizes this matrix in-place and returns its norm.",1,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize_mut","","Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"default_epsilon","","",189,null],[11,"default_max_relative","","",189,null],[11,"default_max_ulps","","",189,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",189,null],[11,"ulps_eq","","",189,null],[11,"is_empty","","Indicates if this is a square matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_square","","Indicates if this is a square matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Indicated if this is the identity matrix within a relative error of `eps`.",1,null],[11,"is_orthogonal","","Checks that `Mᵀ × M = Id`.",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"into","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unchecked","","Create a new matrix slice without bound checking.",190,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",190,null],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",190,null],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unchecked","","Create a new matrix slice without bound checking.",191,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",191,null],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",191,null],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ptr","","",190,null],[11,"shape","","",190,null],[11,"strides","","",190,null],[11,"is_contiguous","","",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",190,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",190,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",190,null],[11,"ptr","","",191,null],[11,"shape","","",191,null],[11,"strides","","",191,null],[11,"is_contiguous","","",191,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",191,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",191,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",191,null],[11,"ptr_mut","","",191,null],[11,"as_mut_slice","","",191,null],[11,"row","","Returns a slice containing the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"row_part","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows","","Extracts from this matrix a set of consecutive rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_with_step","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows","","Extracts a compile-time number of consecutive rows from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows_with_step","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_generic","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"}],"output":{"name":"matrixslice"}}],[11,"rows_generic_with_step","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"column","","Returns a slice containing the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"column_part","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns","","Extracts from this matrix a set of consecutive columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_with_step","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns","","Extracts a compile-time number of consecutive columns from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns_with_step","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_generic","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"}],"output":{"name":"matrixslice"}}],[11,"columns_generic_with_step","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"slice","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,null],[11,"slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"fixed_slice","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"generic_slice","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"generic_slice_with_steps","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"rows_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"columns_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"row_mut","","Returns a slice containing the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"row_part_mut","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_mut","","Extracts from this matrix a set of consecutive rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_with_step_mut","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_mut","","Extracts a compile-time number of consecutive rows from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_with_step_mut","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_generic_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"}],"output":{"name":"matrixslicemut"}}],[11,"rows_generic_with_step_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"column_mut","","Returns a slice containing the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"column_part_mut","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_mut","","Extracts from this matrix a set of consecutive columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_with_step_mut","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_mut","","Extracts a compile-time number of consecutive columns from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_with_step_mut","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_generic_mut","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"}],"output":{"name":"matrixslicemut"}}],[11,"columns_generic_with_step_mut","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,null],[11,"slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"fixed_slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,null],[11,"generic_slice_mut","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"generic_slice_with_steps_mut","","Creates a slice that may or may not have a fixed size and stride.",1,null],[11,"rows_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"columns_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,null],[11,"slice_range","","Slices a sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"},{"name":"colrange"}],"output":{"name":"matrixslice"}}],[11,"rows_range","","Slice containing all the rows indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"}],"output":{"name":"matrixslice"}}],[11,"columns_range","","Slice containing all the columns indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"colrange"}],"output":{"name":"matrixslice"}}],[11,"slice_range_mut","","Slices a mutable sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"},{"name":"colrange"}],"output":{"name":"matrixslicemut"}}],[11,"rows_range_mut","","Slice containing all the rows indexed by the range `rows`.",1,{"inputs":[{"name":"self"},{"name":"rowrange"}],"output":{"name":"matrixslicemut"}}],[11,"columns_range_mut","","Slice containing all the columns indexed by the range `cols`.",1,{"inputs":[{"name":"self"},{"name":"colrange"}],"output":{"name":"matrixslicemut"}}],[11,"hash","","",192,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",192,null],[11,"deref_mut","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ptr","","",192,null],[11,"shape","","",192,null],[11,"strides","","",192,null],[11,"is_contiguous","","",192,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",192,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",192,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",192,null],[11,"ptr_mut","","",192,null],[11,"as_mut_slice","","",192,null],[11,"serialize","","",192,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",192,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"matrixvec"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"new","","Creates a new dynamic matrix data storage from the given vector and shape.",193,{"inputs":[{"name":"r"},{"name":"c"},{"name":"vec"}],"output":{"name":"matrixvec"}}],[11,"data","","The underlying data storage.",193,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"data_mut","","The underlying mutable data storage.",193,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the undelying mutable data storage and unrwaps it.",193,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"deref","","",193,null],[11,"ptr","","",193,null],[11,"shape","","",193,null],[11,"strides","","",193,null],[11,"is_contiguous","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",193,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",193,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",193,null],[11,"ptr","","",193,null],[11,"shape","","",193,null],[11,"strides","","",193,null],[11,"is_contiguous","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",193,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",193,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"as_slice","","",193,null],[11,"ptr_mut","","",193,null],[11,"as_mut_slice","","",193,null],[11,"ptr_mut","","",193,null],[11,"as_mut_slice","","",193,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"hash","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",189,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",189,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new_normalize","","Normalize the given value and return it wrapped on a `Unit` structure.",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",189,null],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,null],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",189,null],[11,"new_unchecked","","Wraps the given value, assuming it is already normalized.",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_unchecked","","Returns a mutable reference to the underlying value. This is `_unchecked` because modifying the underlying value in such a way that it no longer has unit length may lead to unexpected results.",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"neg","","",189,null],[11,"deref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"abs","","Computes the componentwise absolute value.",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"component_mul","","Componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_mul_assign","","Mutable, componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_mul_mut","","Mutable, componentwise matrix multiplication.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div","","Componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_div_assign","","Mutable, componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div_mut","","Mutable, componentwise matrix division.",1,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"upper_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"lower_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"fill","","Sets all the elements of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"fill_with_identity","","Fills `self` with the identity matrix.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_diagonal","","Sets all the diagonal elements of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"fill_row","","Sets all the elements of the selected row to `val`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"fill_column","","Sets all the elements of the selected column to `val`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"set_diagonal","","Fills the diagonal of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"set_row","","Fills the selected row of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rowvector"}],"output":null}],[11,"set_column","","Fills the selected column of this matrix with the content of the given vector.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector"}],"output":null}],[11,"fill_lower_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":null}],[11,"fill_upper_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":null}],[11,"swap_rows","","Swaps two rows in-place.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","Swaps two columns in-place.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"fill_lower_triangle_with_upper_triangle","","Copies the upper-triangle of this matrix to its lower-triangular part.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_upper_triangle_with_lower_triangle","","Copies the upper-triangle of this matrix to its upper-triangular part.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_column","","Removes the `i`-th column from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_fixed_columns","","Removes `D::dim()` consecutive columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_columns","","Removes `n` consecutive columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_columns_generic","","Removes `nremove.value()` columns from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"name":"matrixmn"}}],[11,"remove_row","","Removes the `i`-th row from this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_fixed_rows","","Removes `D::dim()` consecutive rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_rows","","Removes `n` consecutive rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixmn"}}],[11,"remove_rows_generic","","Removes `nremove.value()` rows from this matrix, starting with the `i`-th (included).",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"name":"matrixmn"}}],[11,"insert_column","","Inserts a column filled with `val` at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_fixed_columns","","Inserts `D::dim()` columns filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_columns","","Inserts `n` columns filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_columns_generic_uninitialized","","Inserts `ninsert.value()` columns starting at the `i-th` place of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"name":"matrixmn"}}],[11,"insert_row","","Inserts a row filled with `val` at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_fixed_rows","","Inserts `D::dim()` rows filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_rows","","Inserts `n` rows filled with `val` starting at the `i-th` position.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"insert_rows_generic_uninitialized","","Inserts `ninsert.value()` rows at the `i-th` place of this matrix.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":{"name":"matrixmn"}}],[11,"resize","","Resizes this matrix so that it contains `new_nrows` rows and `new_ncols` columns.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"fixed_resize","","Resizes this matrix so that it contains `R2::value()` rows and `C2::value()` columns.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"resize_generic","","Resizes `self` such that it has dimensions `new_nrows × now_ncols`.",1,{"inputs":[{"name":"self"},{"name":"r2"},{"name":"c2"},{"name":"n"}],"output":{"name":"matrixmn"}}],[6,"SquareMatrix","","A square matrix.",null,null],[6,"Vector","","A matrix with one column and `D` rows.",null,null],[6,"RowVector","","A matrix with one row and `D` columns .",null,null],[6,"MatrixSum","","The type of the result of a matrix sum.",null,null],[6,"VectorSum","","The type of the result of a matrix sum.",null,null],[6,"MatrixCross","","The type of the result of a matrix cross product.",null,null],[6,"MatrixNM","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixMN","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixN","","A staticaly sized column-major square matrix with `D` rows and columns.",null,null],[6,"DMatrix","","A dynamically sized column-major matrix.",null,null],[6,"Matrix1","","A stack-allocated, column-major, 1x1 square matrix.",null,null],[6,"Matrix2","","A stack-allocated, column-major, 2x2 square matrix.",null,null],[6,"Matrix3","","A stack-allocated, column-major, 3x3 square matrix.",null,null],[6,"Matrix4","","A stack-allocated, column-major, 4x4 square matrix.",null,null],[6,"Matrix5","","A stack-allocated, column-major, 5x5 square matrix.",null,null],[6,"Matrix6","","A stack-allocated, column-major, 6x6 square matrix.",null,null],[6,"Matrix1x2","","A stack-allocated, column-major, 1x2 square matrix.",null,null],[6,"Matrix1x3","","A stack-allocated, column-major, 1x3 square matrix.",null,null],[6,"Matrix1x4","","A stack-allocated, column-major, 1x4 square matrix.",null,null],[6,"Matrix1x5","","A stack-allocated, column-major, 1x5 square matrix.",null,null],[6,"Matrix1x6","","A stack-allocated, column-major, 1x6 square matrix.",null,null],[6,"Matrix2x3","","A stack-allocated, column-major, 2x3 square matrix.",null,null],[6,"Matrix2x4","","A stack-allocated, column-major, 2x4 square matrix.",null,null],[6,"Matrix2x5","","A stack-allocated, column-major, 2x5 square matrix.",null,null],[6,"Matrix2x6","","A stack-allocated, column-major, 2x6 square matrix.",null,null],[6,"Matrix3x4","","A stack-allocated, column-major, 3x4 square matrix.",null,null],[6,"Matrix3x5","","A stack-allocated, column-major, 3x5 square matrix.",null,null],[6,"Matrix3x6","","A stack-allocated, column-major, 3x6 square matrix.",null,null],[6,"Matrix4x5","","A stack-allocated, column-major, 4x5 square matrix.",null,null],[6,"Matrix4x6","","A stack-allocated, column-major, 4x6 square matrix.",null,null],[6,"Matrix5x6","","A stack-allocated, column-major, 5x6 square matrix.",null,null],[6,"Matrix2x1","","A stack-allocated, column-major, 2x1 square matrix.",null,null],[6,"Matrix3x1","","A stack-allocated, column-major, 3x1 square matrix.",null,null],[6,"Matrix4x1","","A stack-allocated, column-major, 4x1 square matrix.",null,null],[6,"Matrix5x1","","A stack-allocated, column-major, 5x1 square matrix.",null,null],[6,"Matrix6x1","","A stack-allocated, column-major, 6x1 square matrix.",null,null],[6,"Matrix3x2","","A stack-allocated, column-major, 3x2 square matrix.",null,null],[6,"Matrix4x2","","A stack-allocated, column-major, 4x2 square matrix.",null,null],[6,"Matrix5x2","","A stack-allocated, column-major, 5x2 square matrix.",null,null],[6,"Matrix6x2","","A stack-allocated, column-major, 6x2 square matrix.",null,null],[6,"Matrix4x3","","A stack-allocated, column-major, 4x3 square matrix.",null,null],[6,"Matrix5x3","","A stack-allocated, column-major, 5x3 square matrix.",null,null],[6,"Matrix6x3","","A stack-allocated, column-major, 6x3 square matrix.",null,null],[6,"Matrix5x4","","A stack-allocated, column-major, 5x4 square matrix.",null,null],[6,"Matrix6x4","","A stack-allocated, column-major, 6x4 square matrix.",null,null],[6,"Matrix6x5","","A stack-allocated, column-major, 6x5 square matrix.",null,null],[6,"DVector","","A dynamically sized column vector.",null,null],[6,"VectorN","","A statically sized D-dimensional column vector.",null,null],[6,"Vector1","","A stack-allocated, 1-dimensional column vector.",null,null],[6,"Vector2","","A stack-allocated, 2-dimensional column vector.",null,null],[6,"Vector3","","A stack-allocated, 3-dimensional column vector.",null,null],[6,"Vector4","","A stack-allocated, 4-dimensional column vector.",null,null],[6,"Vector5","","A stack-allocated, 5-dimensional column vector.",null,null],[6,"Vector6","","A stack-allocated, 6-dimensional column vector.",null,null],[6,"RowDVector","","A dynamically sized row vector.",null,null],[6,"RowVectorN","","A statically sized D-dimensional row vector.",null,null],[6,"RowVector1","","A stack-allocated, 1-dimensional row vector.",null,null],[6,"RowVector2","","A stack-allocated, 2-dimensional row vector.",null,null],[6,"RowVector3","","A stack-allocated, 3-dimensional row vector.",null,null],[6,"RowVector4","","A stack-allocated, 4-dimensional row vector.",null,null],[6,"RowVector5","","A stack-allocated, 5-dimensional row vector.",null,null],[6,"RowVector6","","A stack-allocated, 6-dimensional row vector.",null,null],[6,"MatrixSlice","","A matrix slice.",null,null],[6,"MatrixSliceMut","","A matrix slice.",null,null],[8,"Scalar","","The basic scalar type for all structures of `nalgebra`.",null,null],[11,"is","","Tests if `Self` the the same as the type `T`",194,{"inputs":[],"output":{"name":"bool"}}],[8,"SliceRange","","A range with a size that may be known at compile-time.",null,null],[16,"Size","","Type of the range size. May be a type-level integer.",195,null],[10,"begin","","The start index of the range.",195,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"usize"}}],[10,"end","","The index immediatly after the last index inside of the range.",195,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"usize"}}],[10,"size","","The number of elements of the range, i.e., `self.end - self.begin`.",195,null],[0,"linalg","nalgebra","[Reexported at the root of this crate.] Factorization of real matrices.",null,null],[3,"PermutationSequence","nalgebra::linalg","A sequence of row or column permutations.",null,null],[3,"QR","","The QR decomposition of a general matrix.",null,null],[3,"Hessenberg","","Hessenberg decomposition of a general matrix.",null,null],[3,"Bidiagonal","","The bidiagonalization of a general matrix.",null,null],[12,"diagonal","","The diagonal elements of the decomposed matrix.",196,null],[12,"off_diagonal","","The off-diagonal elements of the decomposed matrix.",196,null],[3,"Cholesky","","The Cholesky decomposion of a symmetric-definite-positive matrix.",null,null],[3,"LU","","LU decomposition with partial (row) pivoting.",null,null],[3,"FullPivLU","","LU decomposition with full row and column pivoting.",null,null],[3,"RealSchur","","Real Schur decomposition of a square matrix.",null,null],[3,"SVD","","Singular Value Decomposition of a general matrix.",null,null],[12,"u","","The left-singular vectors `U` of this SVD.",197,null],[12,"v_t","","The right-singular vectors `V^t` of this SVD.",197,null],[12,"singular_values","","The singular values of this SVD.",197,null],[3,"SymmetricTridiagonal","","Tridiagonalization of a symmetric matrix.",null,null],[3,"SymmetricEigen","","Eigendecomposition of a symmetric matrix.",null,null],[12,"eigenvectors","","The eigenvectors of the decomposed matrix.",198,null],[12,"eigenvalues","","The unsorted eigenvalues of the decomposed matrix.",198,null],[5,"try_invert_to","","Performs a LU decomposition to overwrite `out` with the inverse of `matrix`.",null,{"inputs":[{"name":"matrixn"},{"name":"matrix"}],"output":{"name":"bool"}}],[5,"wilkinson_shift","","Computes the wilkinson shift, i.e., the 2x2 symmetric matrix eigenvalue to its tailing component `tnn`.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[11,"solve_lower_triangular","nalgebra::linalg::solve","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"solve_upper_triangular","","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"solve_lower_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"solve_lower_triangular_with_diag_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` is concidered not-zero. The diagonal is never read as it is assumed to be equal to `diag`. Returns `false` and does not modify its inputs if `diag` is zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"n"}],"output":{"name":"bool"}}],[11,"solve_upper_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"tr_solve_lower_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"tr_solve_upper_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"tr_solve_lower_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"tr_solve_upper_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",199,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"determinant","nalgebra::linalg::determinant","Computes the matrix determinant.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_inverse","nalgebra::linalg::inverse","Attempts to invert this matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_inverse_mut","","Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if inversion fails.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"householder","nalgebra::linalg","Construction of householder elementary reflections.",null,null],[0,"givens","","Construction of givens rotations.",null,null],[5,"cancel_y","nalgebra::linalg::givens","Computes the rotation `R` required such that the `y` component of `R * v` is zero.",null,{"inputs":[{"name":"vector"}],"output":{"name":"option"}}],[5,"cancel_x","","Computes the rotation `R` required such that the `x` component of `R * v` is zero.",null,{"inputs":[{"name":"vector"}],"output":{"name":"option"}}],[0,"balancing","nalgebra::linalg","Functions for balancing a matrix.",null,null],[5,"balance_parlett_reinsch","nalgebra::linalg::balancing","Applies in-place a modified Parlett and Reinsch matrix balancing with 2-norm to the matrix `m` and returns the corresponding diagonal transformation.",null,{"inputs":[{"name":"matrixn"}],"output":{"name":"vectorn"}}],[5,"unbalance","","Computes in-place `D * m * D.inverse()`, where `D` is the matrix with diagonal `d`.",null,{"inputs":[{"name":"matrixn"},{"name":"vectorn"}],"output":null}],[11,"clone","nalgebra::linalg","",200,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new statically-allocated sequence of `D` identity permutations.",200,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","Creates a new dynamically-allocated sequence of `n` identity permutations.",200,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"identity_generic","","Creates a new sequence of D identity permutations.",200,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"append_permutation","","Adds the interchange of the row (or column) `i` with the row (or column) `i2` to this sequence of permutations.",200,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"permute_rows","","Applies this sequence of permutations to the rows of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"inv_permute_rows","","Applies this sequence of permutations in reverse to the rows of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"permute_columns","","Applies this sequence of permutations to the columns of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"inv_permute_columns","","Applies this sequence of permutations in reverse to the columns of `rhs`.",200,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"len","","The number of non-identity permutations applied by this sequence.",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"determinant","","The determinant of the matrix corresponding to this permutation.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"qr"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the QR decomposition using householder reflections.",201,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"unpack_r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",201,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"unpack","","Unpacks this decomposition into its two matrix factors.",201,null],[11,"q_tr_mul","","Multiplies the provided matrix by the transpose of the `Q` matrix of this decomposition.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",201,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",201,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",201,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"qr","nalgebra::core","Computes the QR decomposition of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"qr"}}],[11,"clone","nalgebra::linalg","",202,{"inputs":[{"name":"self"}],"output":{"name":"hessenberg"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Hessenberg decomposition using householder reflections.",202,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"new_with_workspace","","Computes the Hessenberg decomposition using householder reflections.",202,{"inputs":[{"name":"matrixn"},{"name":"vectorn"}],"output":{"name":"self"}}],[11,"unpack","","Retrieves `(q, h)` with `q` the orthogonal matrix of this decomposition and `h` the hessenberg matrix.",202,null],[11,"unpack_h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",202,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"hessenberg","nalgebra::linalg::hessenberg","Computes the Hessenberg decomposition of this matrix using householder reflections.",199,{"inputs":[{"name":"self"}],"output":{"name":"hessenberg"}}],[11,"clone","nalgebra::linalg","",196,{"inputs":[{"name":"self"}],"output":{"name":"bidiagonal"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Bidiagonal decomposition using householder reflections.",196,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"is_upper_diagonal","","Indicates whether this decomposition contains an upper-diagonal matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unpack","","Unpacks this decomposition into its three matrix factors `(U, D, V^t)`.",196,null],[11,"d","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",196,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"u","","Computes the orthogonal matrix `U` of this `U * D * V` decomposition.",196,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"v_t","","Computes the orthogonal matrix `V` of this `U * D * V` decomposition.",196,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"diagonal","","The diagonal part of this decomposed matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"off_diagonal","","The off-diagonal part of this decomposed matrix.",196,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"bidiagonalize","nalgebra::core","Computes the bidiagonalization using householder reflections.",1,{"inputs":[{"name":"self"}],"output":{"name":"bidiagonal"}}],[11,"clone","nalgebra::linalg","",203,{"inputs":[{"name":"self"}],"output":{"name":"symmetrictridiagonal"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the tridiagonalization of the symmetric matrix `m`.",203,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"unpack","","Retrieve the orthogonal transformation, diagonal, and off diagonal elements of this decomposition.",203,null],[11,"unpack_tridiagonal","","Retrieve the diagonal, and off diagonal elements of this decomposition.",203,null],[11,"diagonal","","The diagonal components of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"off_diagonal","","The off-diagonal components of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",203,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"recompose","","Recomputes the original symmetric matrix.",203,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"symmetric_tridiagonalize","nalgebra::linalg::symmetric_tridiagonal","Computes the tridiagonalization of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"symmetrictridiagonal"}}],[11,"clone","nalgebra::linalg","",204,{"inputs":[{"name":"self"}],"output":{"name":"cholesky"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Attempts to compute the Cholesky decomposition of `matrix`.",204,{"inputs":[{"name":"matrixn"}],"output":{"name":"option"}}],[11,"unpack","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly upper-triangular part filled with zeros.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"unpack_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"l","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly uppen-triangular part filled with zeros.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"l_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"solve_mut","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",204,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"solve","","Returns the solution of the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",204,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixmn"}}],[11,"inverse","","Computes the inverse of the decomposed matrix.",204,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"cholesky","nalgebra::linalg::cholesky","Attempts to compute the Cholesky decomposition of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","nalgebra::linalg","",205,{"inputs":[{"name":"self"}],"output":{"name":"lu"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the LU decomposition with partial (row) pivoting of `matrix`.",205,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"l","","The lower triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"l_unpack","","The lower triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"u","","The upper triangular matrix of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"p","","The row permutations of this decomposition.",205,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"unpack","","The row permutations and two triangular matrices of this decomposition: `(P, L, U)`.",205,null],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_inverse_to","","Computes the inverse of the decomposed matrix and outputs the result to `out`.",205,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"determinant","","Computes the determinant of the decomposed matrix.",205,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lu","nalgebra::core","Computes the LU decomposition with partial (row) pivoting of `matrix`.",1,{"inputs":[{"name":"self"}],"output":{"name":"lu"}}],[11,"clone","nalgebra::linalg","",206,{"inputs":[{"name":"self"}],"output":{"name":"fullpivlu"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the LU decomposition with full pivoting of `matrix`.",206,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"l","","The lower triangular matrix of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"u","","The upper triangular matrix of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"p","","The row permutations of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"q","","The column permutations of this decomposition.",206,{"inputs":[{"name":"self"}],"output":{"name":"permutationsequence"}}],[11,"unpack","","The two matrices of this decomposition and the row and column permutations: `(P, L, U, Q)`.",206,null],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",206,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"option"}}],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",206,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",206,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"determinant","","Computes the determinant of the decomposed matrix.",206,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"full_piv_lu","nalgebra::core","Computes the LU decomposition with full pivoting of `matrix`.",1,{"inputs":[{"name":"self"}],"output":{"name":"fullpivlu"}}],[11,"clone","nalgebra::linalg","",207,{"inputs":[{"name":"self"}],"output":{"name":"realschur"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Schur decomposition of a square matrix.",207,{"inputs":[{"name":"matrixn"}],"output":{"name":"realschur"}}],[11,"try_new","","Attempts to compute the Schur decomposition of a square matrix.",207,{"inputs":[{"name":"matrixn"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unpack","","Retrieves the unitary matrix `Q` and the upper-quasitriangular matrix `T` such that the decomposed matrix equals `Q * T * Q.transpose()`.",207,null],[11,"eigenvalues","","Computes the real eigenvalues of the decomposed matrix.",207,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"complex_eigenvalues","","Computes the complex eigenvalues of the decomposed matrix.",207,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"real_schur","nalgebra::linalg::schur","Computes the Schur decomposition of a square matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"realschur"}}],[11,"try_real_schur","","Attempts to compute the Schur decomposition of a square matrix.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"eigenvalues","","Computes the eigenvalues of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"complex_eigenvalues","","Computes the eigenvalues of this matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"clone","nalgebra::linalg","",197,{"inputs":[{"name":"self"}],"output":{"name":"svd"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the Singular Value Decomposition of `matrix` using implicit shift.",197,{"inputs":[{"name":"matrixmn"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",197,{"inputs":[{"name":"matrixmn"},{"name":"bool"},{"name":"bool"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"rank","","Computes the rank of the decomposed matrix, i.e., the number of singular values greater than `eps`.",197,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"usize"}}],[11,"recompose","","Rebuild the original matrix.",197,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"pseudo_inverse","","Computes the pseudo-inverse of the decomposed matrix.",197,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"solve","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",197,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"svd","nalgebra::core","Computes the Singular Value Decomposition using implicit shift.",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"svd"}}],[11,"try_svd","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"singular_values","","Computes the singular values of this matrix.",1,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"rank","","Computes the rank of this matrix.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"usize"}}],[11,"pseudo_inverse","","Computes the pseudo-inverse of this matrix.",1,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixmn"}}],[11,"clone","nalgebra::linalg","",198,{"inputs":[{"name":"self"}],"output":{"name":"symmetriceigen"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Computes the eigendecomposition of the given symmetric matrix.",198,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"try_new","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",198,{"inputs":[{"name":"matrixn"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"recompose","","Rebuild the original matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"symmetric_eigen","nalgebra::linalg::symmetric_eigen","Computes the eigendecomposition of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"symmetriceigen"}}],[11,"try_symmetric_eigen","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"option"}}],[11,"symmetric_eigenvalues","","Computes the eigenvalues of this symmetric matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[0,"geometry","nalgebra","[Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)",null,null],[3,"Point","nalgebra::geometry","A point in a n-dimensional euclidean space.",null,null],[12,"coords","","The coordinates of this point, i.e., the shift from the origin.",208,null],[3,"Rotation","","A rotation matrix.",null,null],[3,"Quaternion","","A quaternion. See the type alias `UnitQuaternion = Unit<Quaternion>` for a quaternion that may be used as a rotation.",null,null],[12,"coords","","This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.",209,null],[3,"Translation","","A translation.",null,null],[12,"vector","","The translation coordinates, i.e., how much is added to a point's coordinates when it is translated.",210,null],[3,"Isometry","","A direct isometry, i.e., a rotation followed by a translation.",null,null],[12,"rotation","","The pure rotational part of this isometry.",211,null],[12,"translation","","The pure translational part of this isometry.",211,null],[3,"Similarity","","A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.",null,null],[12,"isometry","","The part of this similarity that does not include the scaling factor.",212,null],[3,"Transform","","A transformation matrix in homogeneous coordinates.",null,null],[3,"Reflection","","A reflection wrt. a plane.",null,null],[3,"Orthographic3","","A 3D orthographic projection stored as an homogeneous 4x4 matrix.",null,null],[3,"Perspective3","","A 3D perspective projection stored as an homogeneous 4x4 matrix.",null,null],[4,"TGeneral","","Tag representing the most general (not necessarily inversible) `Transform` type.",null,null],[4,"TProjective","","Tag representing the most general inversible `Transform` type.",null,null],[4,"TAffine","","Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.",null,null],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",208,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",208,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",208,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"clone","","Clones this point into one that owns its data.",208,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"to_homogeneous","","Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the end of it.",208,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"from_coordinates","","Creates a new point with the given coordinates.",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"point"}}],[11,"len","","The dimension of this point.",208,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stride","","The stride of this point. This is the number of buffer element separating each component of this point.",208,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Iterates through this point coordinates.",208,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"get_unchecked","","Gets a reference to i-th element of this point without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"iter_mut","","Mutably iterates through this point coordinates.",208,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to i-th element of this point without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",208,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"default_epsilon","","",208,null],[11,"default_max_relative","","",208,null],[11,"default_max_ulps","","",208,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",208,null],[11,"ulps_eq","","",208,null],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_uninitialized","","Creates a new point with uninitialized coordinates.",208,{"inputs":[],"output":{"name":"self"}}],[11,"origin","","Creates a new point with all coordinates equal to zero.",208,{"inputs":[],"output":{"name":"self"}}],[11,"from_homogeneous","","Creates a new point from its homogeneous vector representation.",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"option"}}],[11,"max_value","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",208,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"arbitrary","","",208,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"}],"output":{"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[11,"new","","Initializes this matrix from its components.",208,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[11,"index","","",208,null],[11,"index_mut","","",208,null],[11,"neg","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"add_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"sub_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"sub_assign","","",208,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"mul","nalgebra::core","",1,null],[11,"mul","","",1,null],[11,"mul","nalgebra::geometry","",208,null],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",208,null],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"origin","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"coordinates","","",208,null],[11,"from_coordinates","","",208,null],[11,"scale_by","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"meet","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",208,null],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"point"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"point"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"vectorn"}],"output":{"name":"self"}}],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"deref","","",208,null],[11,"deref_mut","","",208,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",213,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",213,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",213,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"matrix","","A reference to the underlying matrix representation of this rotation.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"matrix_mut","","A mutable reference to the underlying matrix representation of this rotation.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"unwrap","","Unwraps the underlying matrix.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"to_homogeneous","","Converts this rotation into its equivalent homogeneous transformation matrix.",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"from_matrix_unchecked","","Creates a new rotation from the given square matrix.",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"rotation"}}],[11,"transpose","","Transposes `self`.",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"inverse","","Inverts `self`.",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"transpose_mut","","Transposes `self` in-place.",213,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts `self` in-place.",213,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",213,null],[11,"default_max_relative","","",213,null],[11,"default_max_ulps","","",213,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",213,null],[11,"ulps_eq","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",213,{"inputs":[],"output":{"name":"rotation"}}],[11,"one","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","nalgebra::core","",1,null],[11,"mul","","",1,null],[11,"div","","",1,null],[11,"div","","",1,null],[11,"mul","nalgebra::geometry","",213,null],[11,"mul","","",213,null],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","nalgebra::geometry::rotation_ops","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",214,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"identity","nalgebra::geometry","",213,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",213,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",213,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",213,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",213,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",213,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",213,null],[11,"append_translation","","",213,null],[11,"prepend_translation","","",213,null],[11,"append_rotation","","",213,null],[11,"prepend_rotation","","",213,null],[11,"append_scaling","","",213,null],[11,"prepend_scaling","","",213,null],[11,"translation","","",213,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",213,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",213,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",213,{"inputs":[{"name":"vectorn"},{"name":"vectorn"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",213,{"inputs":[{"name":"vectorn"},{"name":"vectorn"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"rotation"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",213,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"is_in_subset","","",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",213,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",209,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",209,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",209,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"normalize","","Normalizes this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"try_inverse","","Inverts this quaternion if it is not zero.",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lerp","","Linear interpolation between two quaternion.",209,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"matrixslice"}}],[11,"scalar","","The scalar part `w` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"as_vector","","Reinterprets this quaternion as a 4D vector.",209,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"norm","","The norm of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared norm of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",209,null],[11,"exp","","Compute the exponential of a quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"powf","","Raise the quaternion to a given floating power.",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"as_vector_mut","","Transforms this quaternion into its 4D vector form (Vector part, Scalar part).",209,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"vector_mut","","The mutable vector part `(i, j, k)` of this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"matrixslicemut"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",209,{"inputs":[{"name":"self"}],"output":null}],[11,"try_inverse_mut","","Inverts this quaternion in-place if it is not zero.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize_mut","","Normalizes this quaternion.",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"default_epsilon","","",209,null],[11,"default_max_relative","","",209,null],[11,"default_max_ulps","","",209,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",209,null],[11,"ulps_eq","","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vector","","Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w` vector component.",209,{"inputs":[{"name":"vector4"}],"output":{"name":"self"}}],[11,"new","","Creates a new quaternion from its individual components. Note that the arguments order does not follow the storage order.",209,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts. Note that the arguments order does not follow the storage order.",209,{"inputs":[{"name":"n"},{"name":"vector"}],"output":{"name":"self"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",209,{"inputs":[{"name":"n"},{"name":"n"},{"name":"unit"}],"output":{"name":"self"}}],[11,"identity","","The quaternion multiplicative identity.",209,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rand","","",209,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",209,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"index","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"add","","",209,null],[11,"add","","",209,null],[11,"sub","","",209,null],[11,"sub","","",209,null],[11,"mul","","",209,null],[11,"mul","","",209,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul","","",209,null],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",209,null],[11,"div_assign","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",209,null],[11,"add_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"add_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul_assign","","",209,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"identity","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"operate","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"multiply_by","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",209,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",209,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",209,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",209,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",209,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",209,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",209,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",209,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"is_in_subset","","",209,{"inputs":[{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",209,{"inputs":[{"name":"quaternion"}],"output":{"name":"self"}}],[11,"deref","","",209,null],[11,"deref_mut","","",209,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",213,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",210,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",210,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",210,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"from_vector","","Creates a new translation from the given vector.",210,{"inputs":[{"name":"vectorn"}],"output":{"name":"translation"}}],[11,"inverse","","Inverts `self`.",210,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"to_homogeneous","","Converts this translation into its equivalent homogeneous transformation matrix.",210,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"inverse_mut","","Inverts `self` in-place.",210,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",210,null],[11,"default_max_relative","","",210,null],[11,"default_max_ulps","","",210,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",210,null],[11,"ulps_eq","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",210,{"inputs":[],"output":{"name":"translation"}}],[11,"one","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",210,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"arbitrary","","",210,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",210,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"div","","",210,null],[11,"div","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",210,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"identity","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",210,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",210,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",210,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",210,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",210,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",210,null],[11,"append_translation","","",210,null],[11,"prepend_translation","","",210,null],[11,"append_rotation","","",210,null],[11,"prepend_rotation","","",210,null],[11,"append_scaling","","",210,null],[11,"prepend_scaling","","",210,null],[11,"translation","","",210,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rotation","","",210,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"scaling","","",210,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_vector","","",210,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"from_vector","","",210,{"inputs":[{"name":"vectorn"}],"output":{"name":"option"}}],[11,"powf","","",210,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation_between","","",210,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"option"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"translation"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"translation"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",210,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"is_in_subset","","",210,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",210,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new isometry from its rotational and translational parts.",211,{"inputs":[{"name":"translation"},{"name":"r"}],"output":{"name":"isometry"}}],[11,"inverse","","Inverts `self`.",211,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"inverse_mut","","Inverts `self`.",211,{"inputs":[{"name":"self"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",211,{"inputs":[{"name":"self"},{"name":"r"},{"name":"point"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this isometry into its equivalent homogeneous transformation matrix.",211,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",211,null],[11,"default_max_relative","","",211,null],[11,"default_max_ulps","","",211,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",211,null],[11,"ulps_eq","","",211,null],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity isometry.",211,{"inputs":[],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The isometry that applies the rotation `r` with its axis passing through the point `p`. This effectively lets `p` invariant.",211,{"inputs":[{"name":"r"},{"name":"point"}],"output":{"name":"self"}}],[11,"one","","Creates a new identity isometry.",211,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",211,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"arbitrary","","",211,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",211,{"inputs":[{"name":"vector2"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",211,{"inputs":[{"name":"vector2"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",211,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",211,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",211,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",211,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"identity","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",211,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",211,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",211,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",211,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",211,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",211,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",211,null],[11,"append_translation","","",211,null],[11,"prepend_translation","","",211,null],[11,"append_rotation","","",211,null],[11,"prepend_rotation","","",211,null],[11,"append_scaling","","",211,null],[11,"prepend_scaling","","",211,null],[11,"append_rotation_wrt_point","","",211,null],[11,"translation","","",211,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"rotation","","",211,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",211,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",211,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"is_in_subset","","",211,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",211,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",212,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new similarity from its rotational and translational parts.",212,{"inputs":[{"name":"translation"},{"name":"r"},{"name":"n"}],"output":{"name":"similarity"}}],[11,"from_isometry","","Creates a new similarity from its rotational and translational parts.",212,{"inputs":[{"name":"isometry"},{"name":"n"}],"output":{"name":"similarity"}}],[11,"from_scaling","","Creates a new similarity that applies only a scaling factor.",212,{"inputs":[{"name":"n"}],"output":{"name":"similarity"}}],[11,"inverse","","Inverts `self`.",212,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"inverse_mut","","Inverts `self` in-place.",212,{"inputs":[{"name":"self"}],"output":null}],[11,"set_scaling","","The scaling factor of this similarity transformation.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"scaling","","The scaling factor of this similarity transformation.",212,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"prepend_scaling","","The similarity transformation that applies a scaling factor `scaling` before `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"append_scaling","","The similarity transformation that applies a scaling factor `scaling` after `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"prepend_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.",212,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",212,{"inputs":[{"name":"self"},{"name":"r"},{"name":"point"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this similarity into its equivalent homogeneous transformation matrix.",212,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",212,null],[11,"default_max_relative","","",212,null],[11,"default_max_ulps","","",212,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",212,null],[11,"ulps_eq","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity similarity.",212,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity similarity.",212,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",212,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The similarity that applies tha scaling factor `scaling`, followed by the rotation `r` with its axis passing through the point `p`.",212,{"inputs":[{"name":"r"},{"name":"point"},{"name":"n"}],"output":{"name":"self"}}],[11,"arbitrary","","",212,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",212,{"inputs":[{"name":"vector2"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",212,{"inputs":[{"name":"vector2"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",212,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",212,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",212,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",212,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"div","","",212,null],[11,"div","","",212,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"div","","",211,null],[11,"div","","",211,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"identity","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",212,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",212,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",212,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",212,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",212,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",212,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"decompose","","",212,null],[11,"append_translation","","",212,null],[11,"prepend_translation","","",212,null],[11,"append_rotation","","",212,null],[11,"prepend_rotation","","",212,null],[11,"append_scaling","","",212,null],[11,"prepend_scaling","","",212,null],[11,"append_rotation_wrt_point","","",212,null],[11,"translation","","",212,{"inputs":[{"name":"self"}],"output":{"name":"translation"}}],[11,"rotation","","",212,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",212,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",212,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"is_in_subset","","",212,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",212,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"tgeneral"}}],[11,"hash","","",215,null],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"tgeneral"}],"output":{"name":"bool"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"tprojective"}}],[11,"hash","","",216,null],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"tprojective"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"taffine"}}],[11,"hash","","",217,null],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"taffine"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",215,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",216,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"has_normalizer","","",217,{"inputs":[],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",217,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serialize","","",218,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",218,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_matrix_unchecked","","Creates a new transformation from the given homogeneous matrix. The transformation category of `Self` is not checked to be verified by the given matrix.",218,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"unwrap","","The underlying matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"matrix","","A reference to the underlynig matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"matrix_mut_unchecked","","A mutable reference to the underlying matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"set_category","","Sets the category of this transform.",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"clone_owned","","Clones this transform into one that owns its data.",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"to_homogeneous","","Converts this transform into its equivalent homogeneous transformation matrix.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"try_inverse","","Attempts to invert this transformation. You may use `.inverse` instead of this transformation has a subcategory of `TProjective`.",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse","","Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral` category (it may not be invertible).",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"try_inverse_mut","","Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this transformation has a subcategory of `TProjective`.",218,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse_mut","","Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the `TGeneral` category (it may not be invertible).",218,{"inputs":[{"name":"self"}],"output":null}],[11,"matrix_mut","","A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this transformation category is not `TGeneral`.",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"identity","","Creates a new identity transform.",218,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity transform.",218,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",218,null],[11,"index_mut","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",213,null],[11,"mul","","",213,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",211,null],[11,"mul","","",211,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",212,null],[11,"mul","","",212,null],[11,"mul","","",218,null],[11,"mul","","",218,null],[11,"mul","","",210,null],[11,"mul","","",210,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",213,null],[11,"div","","",213,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",218,null],[11,"div","","",210,null],[11,"div","","",210,null],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"similarity"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"transform"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",218,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"identity","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",218,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",218,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",218,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"transform_vector","","",218,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"inverse_transform_point","","",218,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"inverse_transform_vector","","",218,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"to_superset","","",218,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",218,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",218,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",218,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"is_in_subset","","",218,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",218,{"inputs":[{"name":"matrixn"}],"output":{"name":"self"}}],[11,"new","","Creates a new reflection wrt the plane orthogonal to the given axis and bias.",219,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"reflection"}}],[11,"new_containing_point","","Creates a new reflection wrt. the plane orthogonal to the given axis and that contains the point `pt`.",219,{"inputs":[{"name":"unit"},{"name":"point"}],"output":{"name":"reflection"}}],[11,"axis","","The reflexion axis.",219,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"reflect","","Applies the reflection to the columns of `rhs`.",219,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"reflect_rows","","Applies the reflection to the rows of `rhs`.",219,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"vector"}],"output":null}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",220,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",220,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"new","","Creates a new orthographic projection matrix.",220,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D orthographic matrix.",220,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",220,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",220,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",220,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the underlying matrix inverse.",220,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",220,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector3"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",220,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",220,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",220,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",221,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",221,{"inputs":[{"name":"des"}],"output":{"name":"result"}}],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",221,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D perspective matrix.",221,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",221,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",221,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",221,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the matrix inverse.",221,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",221,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector3"}}],[11,"set_aspect","","Updates this perspective matrix with a new `width / height` aspect ratio of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Updates this perspective with a new y field of view of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this perspective matrix with a new near plane offset of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this perspective matrix with a new far plane offset of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this perspective matrix with new near and far plane offsets of the view frustrum.",221,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",221,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",221,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[6,"Point1","","A statically sized 1-dimensional column point.",null,null],[6,"Point2","","A statically sized 2-dimensional column point.",null,null],[6,"Point3","","A statically sized 3-dimensional column point.",null,null],[6,"Point4","","A statically sized 4-dimensional column point.",null,null],[6,"Point5","","A statically sized 5-dimensional column point.",null,null],[6,"Point6","","A statically sized 6-dimensional column point.",null,null],[6,"Rotation2","","A 2-dimensional rotation matrix.",null,null],[6,"Rotation3","","A 3-dimensional rotation matrix.",null,null],[6,"UnitQuaternion","","A unit quaternions. May be used to represent a rotation.",null,null],[6,"UnitComplex","","A complex number with a norm equal to 1.",null,null],[6,"Translation2","","A 2-dimensional translation.",null,null],[6,"Translation3","","A 3-dimensional translation.",null,null],[6,"Isometry2","","A 2-dimensional isometry using a unit complex number for its rotational part.",null,null],[6,"Isometry3","","A 3-dimensional isometry using a unit quaternion for its rotational part.",null,null],[6,"IsometryMatrix2","","A 2-dimensional isometry using a rotation matrix for its rotational part.",null,null],[6,"IsometryMatrix3","","A 3-dimensional isometry using a rotation matrix for its rotational part.",null,null],[6,"Similarity2","","A 2-dimensional similarity.",null,null],[6,"Similarity3","","A 3-dimensional similarity.",null,null],[6,"SimilarityMatrix2","","A 2-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"SimilarityMatrix3","","A 3-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"Transform2","","A 2D general transformation that may not be inversible. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Projective2","","An inversible 2D general transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Affine2","","A 2D affine transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Transform3","","A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Projective3","","An inversible 3D general transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Affine3","","A 3D affine transformation. Stored as an homogeneous 4x4 matrix.",null,null],[8,"TCategory","","Trait implemented by phantom types identifying the projective transformation type.",null,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",222,{"inputs":[],"output":{"name":"bool"}}],[10,"check_homogeneous_invariants","","Checks that the given matrix is a valid homogeneous representation of an element of the category `Self`.",222,{"inputs":[{"name":"matrixn"}],"output":{"name":"bool"}}],[8,"TCategoryMul","","Traits that gives the `Transform` category that is compatible with the result of the multiplication of transformations with categories `Self` and `Other`.",null,null],[16,"Representative","","The transform category that results from the multiplication of a `Transform<Self>` to a `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most general category.",223,null],[8,"SuperTCategoryOf","","Indicates that `Self` is a more general `Transform` category than `Other`.",null,null],[8,"SubTCategoryOf","","Indicates that `Self` is a more specific `Transform` category than `Other`.",null,null],[11,"powf","nalgebra","",224,null],[11,"rotation_between","","",224,null],[11,"scaled_rotation_between","","",224,null],[11,"div","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul_assign","","",224,null],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"to_vector","","",224,null],[11,"from_vector","","",224,null],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"default_epsilon","","",224,null],[11,"default_max_relative","","",224,null],[11,"default_max_ulps","","",224,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",224,null],[11,"ulps_eq","","",224,null],[11,"meet","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"add_assign","","",224,null],[11,"translation","","",224,null],[11,"rotation","","",224,null],[11,"scaling","","",224,null],[11,"decompose","","",224,null],[11,"append_translation","","",224,null],[11,"prepend_translation","","",224,null],[11,"append_rotation","","",224,null],[11,"prepend_rotation","","",224,null],[11,"append_scaling","","",224,null],[11,"prepend_scaling","","",224,null],[11,"transform_point","","",224,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",224,null],[11,"add","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"partial_cmp","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_superset","","",224,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",224,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",224,{"inputs":[{"name":"t"}],"output":{"name":"id"}}],[11,"inverse","","",224,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"inverse_mut","","",224,null],[11,"join","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"one","","",224,{"inputs":[],"output":{"name":"id"}}],[11,"operate","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul","","",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"zero","","",224,{"inputs":[],"output":{"name":"id"}}],[11,"is_zero","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"identity","","",224,{"inputs":[],"output":{"name":"id"}}],[11,"div_assign","","",224,null],[11,"inverse_transform_point","","",224,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",224,null],[11,"new","","Creates a new identity element.",224,{"inputs":[],"output":{"name":"id"}}],[11,"sum","nalgebra::core","",214,{"inputs":[{"name":"i"}],"output":{"name":"matrixmn"}}],[11,"sum","","",214,{"inputs":[{"name":"i"}],"output":{"name":"matrixmn"}}],[11,"product","","",225,{"inputs":[{"name":"i"}],"output":{"name":"matrixn"}}],[11,"product","","",225,{"inputs":[{"name":"i"}],"output":{"name":"matrixn"}}],[11,"iamax","","Computes the index of the vector component with the largest absolute value.",226,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"axpy","","Computes `self = a * x + b * self`.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemv","","Computes `self = alpha * a * x + beta * self`, where `a` is a matrix, `x` a vector, and `alpha, beta` two scalars.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"gemv_symm","","Computes `self = alpha * a * x + beta * self`, where `a` is a symmetric matrix, `x` a vector, and `alpha, beta` two scalars.",226,{"inputs":[{"name":"self"},{"name":"n"},{"name":"matrix"},{"name":"vector"},{"name":"n"}],"output":null}],[11,"is","","Tests if `Self` the the same as the type `T`",194,{"inputs":[],"output":{"name":"bool"}}],[11,"vget_unchecked","","Gets a reference to the i-th element of this column vector without bound checking.",226,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"vget_unchecked_mut","","Gets a mutable reference to the i-th element of this column vector without bound checking.",226,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",199,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"trace","","Computes a trace of a square matrix, i.e., the sum of its diagonal elements.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_homogeneous","","Computes the coordinates in projective space of this vector, i.e., appends a `0` to its coordinates.",226,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"from_homogeneous","","Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of `self`. Returns `None` if this last component is not zero.",226,{"inputs":[{"name":"vector"}],"output":{"name":"option"}}],[11,"new_uninitialized_generic","","Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics if `nrows != R::to_usize()` or `ncols != C::to_usize()`.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_element_generic","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros_generic","","Creates a matrix with all its elements set to 0.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_iterator_generic","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice. The components must have the same layout as the matrix data storage (i.e. row-major or column-major).",214,null],[11,"from_fn_generic","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity_generic","","Creates a new indentity matrix.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_diagonal_element_generic","","Creates a new matrix with its diagonal filled with copies of `elt`.",214,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal_generic","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"from_rows","","Builds a new matrix from its rows.",214,null],[11,"from_columns","","Builds a new matrix from its columns.",214,null],[11,"new_random_generic","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"self"}}],[11,"from_diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"zeros","","Creates a matrix with all its elements set to `0`.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"self"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",214,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",214,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",214,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",214,null],[11,"new_random","","Creates a matrix filled with random values.",214,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",214,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"arbitrary","","",214,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",214,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"x","","The column vector with a 1 as its first component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"y","","The column vector with a 1 as its second component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"z","","The column vector with a 1 as its third component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"w","","The column vector with a 1 as its fourth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"a","","The column vector with a 1 as its fifth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"b","","The column vector with a 1 as its sixth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"self"}}],[11,"x_axis","","The unit column vector with a 1 as its first component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"y_axis","","The unit column vector with a 1 as its second component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"z_axis","","The unit column vector with a 1 as its third component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"w_axis","","The unit column vector with a 1 as its fourth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"a_axis","","The unit column vector with a 1 as its fifth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"b_axis","","The unit column vector with a 1 as its sixth component, and zero elsewhere.",227,{"inputs":[],"output":{"name":"unit"}}],[11,"is_special_orthogonal","","Checks that this matrix is orthogonal and has a determinant equal to 1.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"is_invertible","","Returns `true` if this matrix is invertible.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"identity","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",214,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"inverse_mut","","",214,{"inputs":[{"name":"self"}],"output":null}],[11,"multiply_by","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",214,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",214,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",214,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",214,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",214,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",214,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"inner_product","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"orthonormalize","","",214,null],[11,"orthonormal_subspace_basis","","",214,null],[11,"identity","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",225,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",214,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",214,null],[11,"to_superset","","",214,{"inputs":[{"name":"self"}],"output":{"name":"matrixmn"}}],[11,"is_in_subset","","",214,{"inputs":[{"name":"matrixmn"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",214,{"inputs":[{"name":"matrixmn"}],"output":{"name":"self"}}],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"from","","",214,null],[11,"new_scaling","","Creates a new homogeneous matrix that applies the same scaling factor on each dimension.",225,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_nonuniform_scaling","","Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_translation","","Creates a new homogeneous matrix that applies a pure translation.",225,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.",228,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"}],"output":{"name":"self"}}],[11,"new_rotation_wrt_point","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"},{"name":"point3"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",229,{"inputs":[{"name":"vector3"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.",229,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_orthographic","","Creates a new homogeneous matrix for an orthographic projection.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_perspective","","Creates a new homogeneous matrix for a perspective projection.",229,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",229,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"self"}}],[11,"append_scaling","","Computes the transformation equal to `self` followed by an uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixn"}}],[11,"prepend_scaling","","Computes the transformation equal to an uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrixn"}}],[11,"append_nonuniform_scaling","","Computes the transformation equal to `self` followed by a non-uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"prepend_nonuniform_scaling","","Computes the transformation equal to a non-uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"append_translation","","Computes the transformation equal to `self` followed by a translation.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"prepend_translation","","Computes the transformation equal to a translation followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"matrixn"}}],[11,"append_scaling_mut","","Computes in-place the transformation equal to `self` followed by an uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling_mut","","Computes in-place the transformation equal to an uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_nonuniform_scaling_mut","","Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"prepend_nonuniform_scaling_mut","","Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"append_translation_mut","","Computes the transformation equal to `self` followed by a translation.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"prepend_translation_mut","","Computes the transformation equal to a translation followed by `self`.",199,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"transform_vector","","",225,{"inputs":[{"name":"self"},{"name":"vectorn"}],"output":{"name":"vectorn"}}],[11,"transform_point","","",225,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"to_superset","nalgebra::geometry","",230,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"is_in_subset","","",230,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",230,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"self"}}],[11,"to_superset","","",231,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",231,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",231,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",231,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.",231,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",231,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",231,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle.",231,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",231,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",231,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"rotation2"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the angle of `self` multiplied by `n`.",231,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"rotation2"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",231,{"inputs":[{"name":"self"}],"output":{"name":"vectorn"}}],[11,"rand","","",231,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",231,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",230,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D rotation matrix from an axis scaled by the rotation angle.",230,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D rotation matrix from an axis and a rotation angle.",230,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",230,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",230,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",230,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","The rotation angle.",230,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"axis","","The rotation axis. Returns `None` if the rotation angle is zero or PI.",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis multiplied by the rotation angle.",230,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",230,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",230,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"rotation3"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the same axis as `self` and an angle equal to `self.angle()` multiplied by `n`.",230,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"rotation3"}}],[11,"rand","","",230,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",230,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"angle","","The rotation angle in [0; pi] of this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"quaternion","","The underlying quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"conjugate","","Compute the conjugate of this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"inverse","","Inverts this quaternion if it is not zero.",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit quaternion needed to make `self` and `other` coincide.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"unitquaternion"}}],[11,"lerp","","Linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Normalized linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"slerp","","Spherical linear interpolation between two unit quaternions.",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"try_slerp","","Computes the spherical linear interpolation between two unit quaternions or returns `None` if both quaternions are approximately 180 degrees apart (in which case the interpolation is not well-defined).",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"conjugate_mut","","Compute the conjugate of this unit quaternion in-place.",232,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts this quaternion if it is not zero.",232,{"inputs":[{"name":"self"}],"output":null}],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",232,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis of this unit quaternion multiplied by the rotation agle.",232,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"exp","","Compute the exponential of a quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"powf","","Raise the quaternion to a given floating power.",232,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this unit quaternion.",232,{"inputs":[{"name":"self"}],"output":{"name":"rotation"}}],[11,"to_homogeneous","","Converts this unit quaternion into its equivalent homogeneous transformation matrix.",232,{"inputs":[{"name":"self"}],"output":{"name":"matrixn"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",232,null],[11,"default_max_relative","","",232,null],[11,"default_max_ulps","","",232,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",232,null],[11,"ulps_eq","","",232,null],[11,"identity","","The quaternion multiplicative identity.",232,{"inputs":[],"output":{"name":"self"}}],[11,"from_axis_angle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",232,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",232,{"inputs":[{"name":"quaternion"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",232,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds an unit quaternion from a rotation matrix.",232,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",232,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"option"}}],[11,"new_observer_frame","","Creates an unit quaternion that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",232,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"new","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",232,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",232,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"one","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",232,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",232,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",232,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"identity","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",232,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",232,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",232,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"transform_vector","","",232,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_transform_point","","",232,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform_vector","","",232,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"decompose","","",232,null],[11,"append_translation","","",232,null],[11,"prepend_translation","","",232,null],[11,"append_rotation","","",232,null],[11,"prepend_rotation","","",232,null],[11,"append_scaling","","",232,null],[11,"prepend_scaling","","",232,null],[11,"translation","","",232,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",232,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",232,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",232,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",232,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",232,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"unitquaternion"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"rotation3"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"rotation3"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",232,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"is_in_subset","","",232,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",232,{"inputs":[{"name":"matrix4"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle in `]-pi; pi]` of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"sin_angle","","The sine of the rotation angle.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"cos_angle","","The cosine of the rotation angle.",233,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",233,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"complex","","The underlying complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"conjugate","","Compute the conjugate of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","Inverts this complex number if it is not zero.",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit complex number needed to make `self` and `other` coincide.",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"conjugate_mut","","Compute in-place the conjugate of this unit complex number.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts in-place this unit complex number.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"powf","","Raise this unit complex number to a given floating power.",233,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"to_rotation_matrix","","Builds the rotation matrix corresponding to this unit complex number.",233,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"to_homogeneous","","Converts this unit complex number into its equivalent homogeneous transformation matrix.",233,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",233,null],[11,"default_max_relative","","",233,null],[11,"default_max_ulps","","",233,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",233,null],[11,"ulps_eq","","",233,null],[11,"identity","","The unit complex number multiplicative identity.",233,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Builds the unit complex number corresponding to the rotation with the angle.",233,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_angle","","Builds the unit complex number corresponding to the rotation with the angle.",233,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_cos_sin_unchecked","","Builds the unit complex number frow the sinus and cosinus of the rotation angle.",233,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.",233,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from_complex","","Creates a new unit complex number from a complex number.",233,{"inputs":[{"name":"complex"}],"output":{"name":"self"}}],[11,"from_complex_and_get","","Creates a new unit complex number from a complex number.",233,null],[11,"from_rotation_matrix","","Builds the unit complex number from the corresponding 2D rotation matrix.",233,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",233,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",233,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"n"}],"output":{"name":"self"}}],[11,"one","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",233,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"arbitrary","","",233,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"mul","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"div","","",233,null],[11,"div","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul","","",233,null],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"mul_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"div_assign","","",233,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"rotate","","Performs the multiplication `rhs = self * rhs` in-place.",233,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"rotate_rows","","Performs the multiplication `lhs = lhs * self` in-place.",233,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"identity","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",233,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",233,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"transform_vector","","",233,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"inverse_transform_point","","",233,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform_vector","","",233,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"decompose","","",233,null],[11,"append_translation","","",233,null],[11,"prepend_translation","","",233,null],[11,"append_rotation","","",233,null],[11,"prepend_rotation","","",233,null],[11,"append_scaling","","",233,null],[11,"prepend_scaling","","",233,null],[11,"translation","","",233,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",233,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",233,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",233,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",233,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",233,{"inputs":[{"name":"vector2"},{"name":"vector2"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"rotation2"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"rotation2"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"isometry"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"isometry"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"similarity"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"similarity"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"similarity"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[11,"to_superset","","",233,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"is_in_subset","","",233,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",233,{"inputs":[{"name":"matrix3"}],"output":{"name":"self"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",222,{"inputs":[],"output":{"name":"bool"}}],[11,"mul","","",232,null],[11,"mul","","",232,null],[11,"div","","",232,null],[11,"div","","",232,null]],"paths":[[8,"Real"],[3,"Matrix"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"DimName"],[8,"NamedDim"],[3,"Dynamic"],[3,"U1"],[3,"U0"],[3,"U2"],[3,"U3"],[3,"U4"],[3,"U5"],[3,"U6"],[3,"U7"],[3,"U8"],[3,"U9"],[3,"U10"],[3,"U11"],[3,"U12"],[3,"U13"],[3,"U14"],[3,"U15"],[3,"U16"],[3,"U17"],[3,"U18"],[3,"U19"],[3,"U20"],[3,"U21"],[3,"U22"],[3,"U23"],[3,"U24"],[3,"U25"],[3,"U26"],[3,"U27"],[3,"U28"],[3,"U29"],[3,"U30"],[3,"U31"],[3,"U32"],[3,"U33"],[3,"U34"],[3,"U35"],[3,"U36"],[3,"U37"],[3,"U38"],[3,"U39"],[3,"U40"],[3,"U41"],[3,"U42"],[3,"U43"],[3,"U44"],[3,"U45"],[3,"U46"],[3,"U47"],[3,"U48"],[3,"U49"],[3,"U50"],[3,"U51"],[3,"U52"],[3,"U53"],[3,"U54"],[3,"U55"],[3,"U56"],[3,"U57"],[3,"U58"],[3,"U59"],[3,"U60"],[3,"U61"],[3,"U62"],[3,"U63"],[3,"U64"],[3,"U65"],[3,"U66"],[3,"U67"],[3,"U68"],[3,"U69"],[3,"U70"],[3,"U71"],[3,"U72"],[3,"U73"],[3,"U74"],[3,"U75"],[3,"U76"],[3,"U77"],[3,"U78"],[3,"U79"],[3,"U80"],[3,"U81"],[3,"U82"],[3,"U83"],[3,"U84"],[3,"U85"],[3,"U86"],[3,"U87"],[3,"U88"],[3,"U89"],[3,"U90"],[3,"U91"],[3,"U92"],[3,"U93"],[3,"U94"],[3,"U95"],[3,"U96"],[3,"U97"],[3,"U98"],[3,"U99"],[3,"U100"],[3,"U101"],[3,"U102"],[3,"U103"],[3,"U104"],[3,"U105"],[3,"U106"],[3,"U107"],[3,"U108"],[3,"U109"],[3,"U110"],[3,"U111"],[3,"U112"],[3,"U113"],[3,"U114"],[3,"U115"],[3,"U116"],[3,"U117"],[3,"U118"],[3,"U119"],[3,"U120"],[3,"U121"],[3,"U122"],[3,"U123"],[3,"U124"],[3,"U125"],[3,"U126"],[3,"U127"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[8,"Allocator"],[8,"Reallocator"],[8,"Storage"],[8,"StorageMut"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"DefaultAllocator"],[3,"Unit"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"MatrixArray"],[3,"MatrixVec"],[8,"Scalar"],[8,"SliceRange"],[3,"Bidiagonal"],[3,"SVD"],[3,"SymmetricEigen"],[6,"SquareMatrix"],[3,"PermutationSequence"],[3,"QR"],[3,"Hessenberg"],[3,"SymmetricTridiagonal"],[3,"Cholesky"],[3,"LU"],[3,"FullPivLU"],[3,"RealSchur"],[3,"Point"],[3,"Quaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[3,"Rotation"],[6,"MatrixMN"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"Transform"],[3,"Reflection"],[3,"Orthographic3"],[3,"Perspective3"],[8,"TCategory"],[8,"TCategoryMul"],[3,"Id"],[6,"MatrixN"],[6,"Vector"],[6,"VectorN"],[6,"Matrix3"],[6,"Matrix4"],[6,"Rotation3"],[6,"Rotation2"],[6,"UnitQuaternion"],[6,"UnitComplex"]]};
initSearch(searchIndex);
