var searchIndex = {};
searchIndex["nalgebra"] = {"doc":"nalgebra","items":[[3,"Id","nalgebra","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[5,"id","","Gets the ubiquitous multiplicative identity element.",null,{"inputs":[],"output":{"name":"id"}}],[5,"one","","Gets the multiplicative identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Gets the additive identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Gets the origin of the given point.",null,{"inputs":[],"output":{"name":"p"}}],[5,"dimension","","The dimension of the given algebraic entity seen as a vector space.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"wrap","","Wraps `val` into the range `[min, max]` using modular arithmetics.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Returns a reference to the input value clamped to the interval `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"abs","","The absolute value of `a`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf_sup","","Returns simultaneously the infimum and supremum of `a` and `b`.",null,null],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"try_inverse","","Tries to gets an inverted copy of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"inverse","","Computes the multiplicative inverse of an (always invertible) algebraic entity.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"dot","","Computes the dot product of two vectors.",null,null],[5,"angle","","Computes the smallest angle between two vectors.",null,null],[5,"norm","","Computes the L2 (euclidean) norm of a vector.",null,null],[5,"norm_squared","","Computes the squared L2 (euclidean) norm of the vector `v`.",null,null],[5,"normalize","","Computes the normalized version of the vector `v`.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.",null,null],[5,"center","","The center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","The distance between two points.",null,null],[5,"distance_squared","","The squared distance between two points.",null,null],[5,"convert","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"is_convertible","","Indicates if `::try_convert` will succeed without actually performing the conversion.",null,{"inputs":[{"name":"from"}],"output":{"name":"bool"}}],[5,"convert_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"convert_ref","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert_ref","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"convert_ref_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[0,"core","","[Reexported at the root of this crate.] Data structures for vector and matrix computations.",null,null],[3,"Matrix","nalgebra::core","The most generic column-major matrix (and vector) type.",null,null],[12,"data","","The data storage that contains all the matrix components and informations about its number of rows and column (if needed).",0,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[3,"SliceStorage","","A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.",null,null],[3,"SliceStorageMut","","A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.",null,null],[3,"MatrixArray","","A array-based statically sized matrix data storage.",null,null],[3,"MatrixVec","","A Vec-based matrix data storage. It may be dynamically-sized.",null,null],[0,"dimension","","Traits and tags for identifying the dimension of all algebraic entities.",null,null],[3,"Dynamic","nalgebra::core::dimension","Dim of dynamically-sized algebraic entities.",null,null],[3,"U1","","",null,null],[3,"U0","","",null,null],[3,"U2","","",null,null],[3,"U3","","",null,null],[3,"U4","","",null,null],[3,"U5","","",null,null],[3,"U6","","",null,null],[3,"U7","","",null,null],[3,"U8","","",null,null],[3,"U9","","",null,null],[3,"U10","","",null,null],[3,"U11","","",null,null],[3,"U12","","",null,null],[3,"U13","","",null,null],[3,"U14","","",null,null],[3,"U15","","",null,null],[3,"U16","","",null,null],[3,"U17","","",null,null],[3,"U18","","",null,null],[3,"U19","","",null,null],[3,"U20","","",null,null],[3,"U21","","",null,null],[3,"U22","","",null,null],[3,"U23","","",null,null],[3,"U24","","",null,null],[3,"U25","","",null,null],[3,"U26","","",null,null],[3,"U27","","",null,null],[3,"U28","","",null,null],[3,"U29","","",null,null],[3,"U30","","",null,null],[3,"U31","","",null,null],[3,"U32","","",null,null],[3,"U33","","",null,null],[3,"U34","","",null,null],[3,"U35","","",null,null],[3,"U36","","",null,null],[3,"U37","","",null,null],[3,"U38","","",null,null],[3,"U39","","",null,null],[3,"U40","","",null,null],[3,"U41","","",null,null],[3,"U42","","",null,null],[3,"U43","","",null,null],[3,"U44","","",null,null],[3,"U45","","",null,null],[3,"U46","","",null,null],[3,"U47","","",null,null],[3,"U48","","",null,null],[3,"U49","","",null,null],[3,"U50","","",null,null],[3,"U51","","",null,null],[3,"U52","","",null,null],[3,"U53","","",null,null],[3,"U54","","",null,null],[3,"U55","","",null,null],[3,"U56","","",null,null],[3,"U57","","",null,null],[3,"U58","","",null,null],[3,"U59","","",null,null],[3,"U60","","",null,null],[3,"U61","","",null,null],[3,"U62","","",null,null],[3,"U63","","",null,null],[3,"U64","","",null,null],[3,"U65","","",null,null],[3,"U66","","",null,null],[3,"U67","","",null,null],[3,"U68","","",null,null],[3,"U69","","",null,null],[3,"U70","","",null,null],[3,"U71","","",null,null],[3,"U72","","",null,null],[3,"U73","","",null,null],[3,"U74","","",null,null],[3,"U75","","",null,null],[3,"U76","","",null,null],[3,"U77","","",null,null],[3,"U78","","",null,null],[3,"U79","","",null,null],[3,"U80","","",null,null],[3,"U81","","",null,null],[3,"U82","","",null,null],[3,"U83","","",null,null],[3,"U84","","",null,null],[3,"U85","","",null,null],[3,"U86","","",null,null],[3,"U87","","",null,null],[3,"U88","","",null,null],[3,"U89","","",null,null],[3,"U90","","",null,null],[3,"U91","","",null,null],[3,"U92","","",null,null],[3,"U93","","",null,null],[3,"U94","","",null,null],[3,"U95","","",null,null],[3,"U96","","",null,null],[3,"U97","","",null,null],[3,"U98","","",null,null],[3,"U99","","",null,null],[3,"U100","","",null,null],[3,"U101","","",null,null],[3,"U102","","",null,null],[3,"U103","","",null,null],[3,"U104","","",null,null],[3,"U105","","",null,null],[3,"U106","","",null,null],[3,"U107","","",null,null],[3,"U108","","",null,null],[3,"U109","","",null,null],[3,"U110","","",null,null],[3,"U111","","",null,null],[3,"U112","","",null,null],[3,"U113","","",null,null],[3,"U114","","",null,null],[3,"U115","","",null,null],[3,"U116","","",null,null],[3,"U117","","",null,null],[3,"U118","","",null,null],[3,"U119","","",null,null],[3,"U120","","",null,null],[3,"U121","","",null,null],[3,"U122","","",null,null],[3,"U123","","",null,null],[3,"U124","","",null,null],[3,"U125","","",null,null],[3,"U126","","",null,null],[3,"U127","","",null,null],[6,"DimSum","","",null,null],[6,"DimNameSum","","",null,null],[6,"DimProd","","",null,null],[6,"DimNameProd","","",null,null],[6,"DimDiff","","",null,null],[6,"DimNameDiff","","",null,null],[6,"DimQuot","","",null,null],[6,"DimNameQuot","","",null,null],[8,"IsDynamic","","Trait implemented by `Dynamic`.",null,null],[8,"IsNotStaticOne","","Trait implemented by `Dynamic` and type-level integers different from `U1`.",null,null],[8,"Dim","","Trait implemented by any type that can be used as a dimension. This includes type-level integers and `Dynamic` (for dimensions not known at compile-time).",null,null],[10,"try_to_usize","","Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self = Dynamic`.",1,{"inputs":[],"output":{"name":"option"}}],[10,"value","","Gets the run-time value of `self`. For type-level integers, this is the same as `Self::try_to_usize().unwrap()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level integer and `dim != Self::try_to_usize().unwrap()`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"DimAdd","","",null,null],[16,"Output","","",2,null],[10,"add","","",2,null],[8,"DimNameAdd","","",null,null],[16,"Output","","",3,null],[10,"add","","",3,null],[8,"DimMul","","",null,null],[16,"Output","","",4,null],[10,"mul","","",4,null],[8,"DimNameMul","","",null,null],[16,"Output","","",5,null],[10,"mul","","",5,null],[8,"DimSub","","",null,null],[16,"Output","","",6,null],[10,"sub","","",6,null],[8,"DimNameSub","","",null,null],[16,"Output","","",7,null],[10,"sub","","",7,null],[8,"DimDiv","","",null,null],[16,"Output","","",8,null],[10,"div","","",8,null],[8,"DimNameDiv","","",null,null],[16,"Output","","",9,null],[10,"div","","",9,null],[8,"DimName","","Trait implemented exclusively by type-level integers.",null,null],[16,"Value","","",10,null],[10,"name","","The name of this dimension, i.e., the singleton `Self`.",10,{"inputs":[],"output":{"name":"self"}}],[11,"dim","","The value of this dimension.",10,{"inputs":[],"output":{"name":"usize"}}],[8,"NamedDim","","",null,null],[16,"Name","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"new","","A dynamic size equal to `value`.",12,{"inputs":[{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"try_to_usize","","",12,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"u1"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u1"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",13,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"u0"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u0"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",14,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"u2"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u2"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",15,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"u3"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u3"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",16,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u4"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u4"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",17,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"u5"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u5"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",18,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"u6"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u6"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",19,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"u7"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u7"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",20,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",21,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"u9"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u9"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",22,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"u10"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u10"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",23,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"u11"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u11"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",24,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"u12"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u12"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",25,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",25,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"u13"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u13"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",26,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"u14"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u14"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",27,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"u15"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u15"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",28,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",29,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"u17"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u17"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",30,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"u18"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u18"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",31,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u19"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u19"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",32,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"u20"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u20"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"u21"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u21"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"u22"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u22"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",35,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u23"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u23"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",36,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"u24"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u24"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",37,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"u25"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u25"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",38,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",38,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"u26"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u26"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",39,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"u27"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u27"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",40,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"u28"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u28"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",41,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"u29"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u29"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",42,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"u30"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u30"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",43,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"u31"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u31"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",44,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",45,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"u33"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u33"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",46,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u34"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u34"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",47,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",47,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"u35"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u35"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",48,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"u36"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u36"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",49,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"u37"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u37"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",50,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"u38"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u38"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"u39"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u39"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",52,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"u40"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u40"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",53,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"u41"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u41"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",54,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"u42"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u42"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",55,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"u43"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u43"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",56,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"u44"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u44"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"u45"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u45"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",58,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"u46"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u46"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",59,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",59,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"u47"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u47"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",60,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"u48"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u48"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",61,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"u49"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u49"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",62,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",62,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"u50"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u50"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",63,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"u51"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u51"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",64,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",64,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"u52"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u52"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",65,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"u53"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u53"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",66,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",66,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",66,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"u54"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u54"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",67,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",67,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"u55"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u55"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",68,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"u56"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u56"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",69,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",69,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"u57"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u57"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",70,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"u58"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u58"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",71,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",71,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"u59"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u59"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",72,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"u60"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u60"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",73,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",73,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"u61"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u61"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",74,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",74,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"u62"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u62"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",75,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"u63"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u63"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",76,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",77,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",77,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"u65"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u65"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",78,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"u66"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u66"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",79,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",79,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"u67"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u67"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",80,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",80,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"u68"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u68"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",81,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",81,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"u69"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u69"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",82,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",82,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"u70"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u70"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",83,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"u71"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u71"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",84,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"u72"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u72"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",85,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",85,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"u73"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u73"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",86,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",86,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"u74"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u74"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",87,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"u75"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u75"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",88,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"u76"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u76"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",89,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",89,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"u77"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u77"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",90,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",90,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"u78"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u78"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",91,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"u79"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u79"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",92,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",92,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"u80"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u80"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",93,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",93,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"u81"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u81"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",94,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"u82"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u82"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",95,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"u83"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u83"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",96,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",96,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"u84"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u84"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",97,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"u85"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u85"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",98,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"u86"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u86"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",99,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",99,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"u87"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u87"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",100,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",100,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"u88"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u88"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",101,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",101,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"u89"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u89"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",102,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",102,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"u90"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u90"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",103,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"u91"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u91"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",104,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",104,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"u92"}],"output":{"name":"bool"}}],[11,"hash","","",105,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u92"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",105,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",105,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"u93"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u93"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",106,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"u94"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u94"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",107,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",107,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"u95"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u95"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",108,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",108,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"u96"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u96"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",109,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"u97"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u97"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",110,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",110,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"u98"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"u98"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",111,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",111,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"u99"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u99"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",112,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",112,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"u100"}],"output":{"name":"bool"}}],[11,"hash","","",113,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u100"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",113,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",113,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"u101"}],"output":{"name":"bool"}}],[11,"hash","","",114,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u101"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",114,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",114,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"u102"}],"output":{"name":"bool"}}],[11,"hash","","",115,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u102"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",115,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"u103"}],"output":{"name":"bool"}}],[11,"hash","","",116,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"u103"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",116,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",116,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"u104"}],"output":{"name":"bool"}}],[11,"hash","","",117,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u104"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",117,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",117,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"u105"}],"output":{"name":"bool"}}],[11,"hash","","",118,null],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u105"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",118,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",118,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"u106"}],"output":{"name":"bool"}}],[11,"hash","","",119,null],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u106"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",119,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",119,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"u107"}],"output":{"name":"bool"}}],[11,"hash","","",120,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u107"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",120,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"u108"}],"output":{"name":"bool"}}],[11,"hash","","",121,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u108"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",121,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"u109"}],"output":{"name":"bool"}}],[11,"hash","","",122,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u109"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",122,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",122,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"u110"}],"output":{"name":"bool"}}],[11,"hash","","",123,null],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u110"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",123,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",123,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"u111"}],"output":{"name":"bool"}}],[11,"hash","","",124,null],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u111"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",124,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",124,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"u112"}],"output":{"name":"bool"}}],[11,"hash","","",125,null],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u112"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",125,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",125,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"u113"}],"output":{"name":"bool"}}],[11,"hash","","",126,null],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u113"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",126,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",126,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"u114"}],"output":{"name":"bool"}}],[11,"hash","","",127,null],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u114"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",127,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",127,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"u115"}],"output":{"name":"bool"}}],[11,"hash","","",128,null],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u115"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",128,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",128,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"u116"}],"output":{"name":"bool"}}],[11,"hash","","",129,null],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u116"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",129,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",129,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"u117"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u117"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",130,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",130,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"u118"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u118"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",131,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",131,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"u119"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u119"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",132,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",132,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"u120"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u120"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",133,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",133,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"u121"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u121"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",134,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",134,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"u122"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u122"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",135,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",135,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"u123"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u123"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",136,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",136,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"u124"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u124"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",137,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",137,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"u125"}],"output":{"name":"bool"}}],[11,"hash","","",138,null],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u125"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",138,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",138,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"u126"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"u126"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",139,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",139,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"u127"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u127"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_to_usize","","",140,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",140,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",140,{"inputs":[],"output":{"name":"self"}}],[0,"constraint","nalgebra::core","Compatibility constraints between matrix shapes, e.g., for addition or multiplication.",null,null],[3,"ShapeConstraint","nalgebra::core::constraint","A type used in `where` clauses for enforcing constraints.",null,null],[8,"AreMultipliable","","Constraints `C1` and `R2` to be equivalent.",null,null],[8,"DimEq","","Constraints `D1` and `D2` to be equivalent.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",141,null],[8,"SameNumberOfRows","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",142,null],[8,"SameNumberOfColumns","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",143,null],[8,"SameDimension","","Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic entities (e.g. square matrices).",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",144,null],[0,"allocator","nalgebra::core","Abstract definition of a matrix data storage allocator.",null,null],[6,"SameShapeR","nalgebra::core::allocator","The number of rows of the result of a componentwise operation on two matrices.",null,null],[6,"SameShapeC","","The number of columns of the result of a componentwise operation on two matrices.",null,null],[8,"Allocator","","A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()` elements of type `N`.",null,null],[16,"Buffer","","The type of buffer this allocator can instanciate.",145,null],[10,"allocate_uninitialized","","Allocates a buffer with the given number of rows and columns without initializing its content.",145,null],[10,"allocate_from_iterator","","Allocates a buffer initialized with the content of the given iterator.",145,null],[8,"OwnedAllocator","","A matrix data allocator dedicated to the given owned matrix storage.",null,null],[8,"SameShapeAllocator","","Restricts the given number of rows and columns to be respectively the same. Can only be used when `Self = SA::Alloc`.",null,null],[8,"SameShapeColumnVectorAllocator","","Restricts the given number of rows to be equal. Can only be used when `Self = SA::Alloc`.",null,null],[0,"storage","nalgebra::core","Abstract definition of a matrix data storage.",null,null],[6,"SumStorage","nalgebra::core::storage","The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.",null,null],[6,"MulStorage","","The data storage for the multiplication of two matrices with dimensions `(R1, C1)` on the left hand side, and with `C2` columns on the right hand side.",null,null],[6,"TrMulStorage","","The data storage for the multiplication of two matrices with dimensions `(R1, C1)` on the left hand side, and with `C2` columns on the right hand side. The first matrix is implicitly transposed.",null,null],[6,"Owned","","The owned data storage that can be allocated from `S`.",null,null],[8,"Storage","","The trait shared by all matrix data storage.",null,null],[16,"RStride","","The static stride of this storage's rows.",146,null],[16,"CStride","","The static stride of this storage's columns.",146,null],[16,"Alloc","","The allocator for this family of storage.",146,null],[10,"into_owned","","Builds a matrix data storage that does not contain any reference.",146,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"clone_owned","","Clones this data storage into one that does not contain any reference.",146,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"ptr","","The matrix data pointer.",146,null],[10,"shape","","The dimension of the matrix at run-time. Arr length of zero indicates the additive identity element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.",146,null],[10,"strides","","The spacing between concecutive row elements and consecutive column elements.",146,null],[11,"linear_index","","Compute the index corresponding to the irow-th row and icol-th column of this matrix. The index must be such that the following holds:",146,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_address_unchecked_linear","","Gets the address of the i-th matrix component without performing bound-checking.",146,null],[11,"get_address_unchecked","","Gets the address of the i-th matrix component without performing bound-checking.",146,null],[11,"get_unchecked_linear","","Retrieves a reference to the i-th element without bound-checking.",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked","","Retrieves a reference to the i-th element without bound-checking.",146,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[8,"StorageMut","","Trait implemented by matrix data storage that can provide a mutable access to its elements.",null,null],[10,"ptr_mut","","The matrix mutable data pointer.",147,null],[11,"get_address_unchecked_linear_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",147,null],[11,"get_address_unchecked_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",147,null],[11,"get_unchecked_linear_mut","","Retrieves a mutable reference to the i-th element without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked_mut","","Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked_linear","","Swaps two elements using their linear index without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_unchecked","","Swaps two elements without bound-checking.",147,null],[8,"OwnedStorage","","A matrix storage that does not contain any reference and that is stored contiguously in memory.",null,null],[10,"as_slice","","Converts this data storage to a slice.",148,null],[10,"as_mut_slice","","Converts this data storage to a mutable slice.",148,null],[0,"coordinates","nalgebra::core","Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead of `v[2]`.",null,null],[3,"X","nalgebra::core::coordinates","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",149,null],[3,"XY","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",150,null],[12,"y","","",150,null],[3,"XYZ","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",151,null],[12,"y","","",151,null],[12,"z","","",151,null],[3,"XYZW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",152,null],[12,"y","","",152,null],[12,"z","","",152,null],[12,"w","","",152,null],[3,"XYZWA","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",153,null],[12,"y","","",153,null],[12,"z","","",153,null],[12,"w","","",153,null],[12,"a","","",153,null],[3,"XYZWAB","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",154,null],[12,"y","","",154,null],[12,"z","","",154,null],[12,"w","","",154,null],[12,"a","","",154,null],[12,"b","","",154,null],[3,"IJKW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"i","","",155,null],[12,"j","","",155,null],[12,"k","","",155,null],[12,"w","","",155,null],[3,"M2x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",156,null],[12,"m21","","",156,null],[12,"m12","","",156,null],[12,"m22","","",156,null],[3,"M2x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",157,null],[12,"m21","","",157,null],[12,"m12","","",157,null],[12,"m22","","",157,null],[12,"m13","","",157,null],[12,"m23","","",157,null],[3,"M2x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",158,null],[12,"m21","","",158,null],[12,"m12","","",158,null],[12,"m22","","",158,null],[12,"m13","","",158,null],[12,"m23","","",158,null],[12,"m14","","",158,null],[12,"m24","","",158,null],[3,"M2x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",159,null],[12,"m21","","",159,null],[12,"m12","","",159,null],[12,"m22","","",159,null],[12,"m13","","",159,null],[12,"m23","","",159,null],[12,"m14","","",159,null],[12,"m24","","",159,null],[12,"m15","","",159,null],[12,"m25","","",159,null],[3,"M2x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",160,null],[12,"m21","","",160,null],[12,"m12","","",160,null],[12,"m22","","",160,null],[12,"m13","","",160,null],[12,"m23","","",160,null],[12,"m14","","",160,null],[12,"m24","","",160,null],[12,"m15","","",160,null],[12,"m25","","",160,null],[12,"m16","","",160,null],[12,"m26","","",160,null],[3,"M3x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",161,null],[12,"m21","","",161,null],[12,"m31","","",161,null],[12,"m12","","",161,null],[12,"m22","","",161,null],[12,"m32","","",161,null],[3,"M3x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",162,null],[12,"m21","","",162,null],[12,"m31","","",162,null],[12,"m12","","",162,null],[12,"m22","","",162,null],[12,"m32","","",162,null],[12,"m13","","",162,null],[12,"m23","","",162,null],[12,"m33","","",162,null],[3,"M3x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",163,null],[12,"m21","","",163,null],[12,"m31","","",163,null],[12,"m12","","",163,null],[12,"m22","","",163,null],[12,"m32","","",163,null],[12,"m13","","",163,null],[12,"m23","","",163,null],[12,"m33","","",163,null],[12,"m14","","",163,null],[12,"m24","","",163,null],[12,"m34","","",163,null],[3,"M3x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",164,null],[12,"m21","","",164,null],[12,"m31","","",164,null],[12,"m12","","",164,null],[12,"m22","","",164,null],[12,"m32","","",164,null],[12,"m13","","",164,null],[12,"m23","","",164,null],[12,"m33","","",164,null],[12,"m14","","",164,null],[12,"m24","","",164,null],[12,"m34","","",164,null],[12,"m15","","",164,null],[12,"m25","","",164,null],[12,"m35","","",164,null],[3,"M3x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",165,null],[12,"m21","","",165,null],[12,"m31","","",165,null],[12,"m12","","",165,null],[12,"m22","","",165,null],[12,"m32","","",165,null],[12,"m13","","",165,null],[12,"m23","","",165,null],[12,"m33","","",165,null],[12,"m14","","",165,null],[12,"m24","","",165,null],[12,"m34","","",165,null],[12,"m15","","",165,null],[12,"m25","","",165,null],[12,"m35","","",165,null],[12,"m16","","",165,null],[12,"m26","","",165,null],[12,"m36","","",165,null],[3,"M4x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",166,null],[12,"m21","","",166,null],[12,"m31","","",166,null],[12,"m41","","",166,null],[12,"m12","","",166,null],[12,"m22","","",166,null],[12,"m32","","",166,null],[12,"m42","","",166,null],[3,"M4x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",167,null],[12,"m21","","",167,null],[12,"m31","","",167,null],[12,"m41","","",167,null],[12,"m12","","",167,null],[12,"m22","","",167,null],[12,"m32","","",167,null],[12,"m42","","",167,null],[12,"m13","","",167,null],[12,"m23","","",167,null],[12,"m33","","",167,null],[12,"m43","","",167,null],[3,"M4x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",168,null],[12,"m21","","",168,null],[12,"m31","","",168,null],[12,"m41","","",168,null],[12,"m12","","",168,null],[12,"m22","","",168,null],[12,"m32","","",168,null],[12,"m42","","",168,null],[12,"m13","","",168,null],[12,"m23","","",168,null],[12,"m33","","",168,null],[12,"m43","","",168,null],[12,"m14","","",168,null],[12,"m24","","",168,null],[12,"m34","","",168,null],[12,"m44","","",168,null],[3,"M4x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",169,null],[12,"m21","","",169,null],[12,"m31","","",169,null],[12,"m41","","",169,null],[12,"m12","","",169,null],[12,"m22","","",169,null],[12,"m32","","",169,null],[12,"m42","","",169,null],[12,"m13","","",169,null],[12,"m23","","",169,null],[12,"m33","","",169,null],[12,"m43","","",169,null],[12,"m14","","",169,null],[12,"m24","","",169,null],[12,"m34","","",169,null],[12,"m44","","",169,null],[12,"m15","","",169,null],[12,"m25","","",169,null],[12,"m35","","",169,null],[12,"m45","","",169,null],[3,"M4x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",170,null],[12,"m21","","",170,null],[12,"m31","","",170,null],[12,"m41","","",170,null],[12,"m12","","",170,null],[12,"m22","","",170,null],[12,"m32","","",170,null],[12,"m42","","",170,null],[12,"m13","","",170,null],[12,"m23","","",170,null],[12,"m33","","",170,null],[12,"m43","","",170,null],[12,"m14","","",170,null],[12,"m24","","",170,null],[12,"m34","","",170,null],[12,"m44","","",170,null],[12,"m15","","",170,null],[12,"m25","","",170,null],[12,"m35","","",170,null],[12,"m45","","",170,null],[12,"m16","","",170,null],[12,"m26","","",170,null],[12,"m36","","",170,null],[12,"m46","","",170,null],[3,"M5x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",171,null],[12,"m21","","",171,null],[12,"m31","","",171,null],[12,"m41","","",171,null],[12,"m51","","",171,null],[12,"m12","","",171,null],[12,"m22","","",171,null],[12,"m32","","",171,null],[12,"m42","","",171,null],[12,"m52","","",171,null],[3,"M5x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",172,null],[12,"m21","","",172,null],[12,"m31","","",172,null],[12,"m41","","",172,null],[12,"m51","","",172,null],[12,"m12","","",172,null],[12,"m22","","",172,null],[12,"m32","","",172,null],[12,"m42","","",172,null],[12,"m52","","",172,null],[12,"m13","","",172,null],[12,"m23","","",172,null],[12,"m33","","",172,null],[12,"m43","","",172,null],[12,"m53","","",172,null],[3,"M5x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",173,null],[12,"m21","","",173,null],[12,"m31","","",173,null],[12,"m41","","",173,null],[12,"m51","","",173,null],[12,"m12","","",173,null],[12,"m22","","",173,null],[12,"m32","","",173,null],[12,"m42","","",173,null],[12,"m52","","",173,null],[12,"m13","","",173,null],[12,"m23","","",173,null],[12,"m33","","",173,null],[12,"m43","","",173,null],[12,"m53","","",173,null],[12,"m14","","",173,null],[12,"m24","","",173,null],[12,"m34","","",173,null],[12,"m44","","",173,null],[12,"m54","","",173,null],[3,"M5x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",174,null],[12,"m21","","",174,null],[12,"m31","","",174,null],[12,"m41","","",174,null],[12,"m51","","",174,null],[12,"m12","","",174,null],[12,"m22","","",174,null],[12,"m32","","",174,null],[12,"m42","","",174,null],[12,"m52","","",174,null],[12,"m13","","",174,null],[12,"m23","","",174,null],[12,"m33","","",174,null],[12,"m43","","",174,null],[12,"m53","","",174,null],[12,"m14","","",174,null],[12,"m24","","",174,null],[12,"m34","","",174,null],[12,"m44","","",174,null],[12,"m54","","",174,null],[12,"m15","","",174,null],[12,"m25","","",174,null],[12,"m35","","",174,null],[12,"m45","","",174,null],[12,"m55","","",174,null],[3,"M5x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",175,null],[12,"m21","","",175,null],[12,"m31","","",175,null],[12,"m41","","",175,null],[12,"m51","","",175,null],[12,"m12","","",175,null],[12,"m22","","",175,null],[12,"m32","","",175,null],[12,"m42","","",175,null],[12,"m52","","",175,null],[12,"m13","","",175,null],[12,"m23","","",175,null],[12,"m33","","",175,null],[12,"m43","","",175,null],[12,"m53","","",175,null],[12,"m14","","",175,null],[12,"m24","","",175,null],[12,"m34","","",175,null],[12,"m44","","",175,null],[12,"m54","","",175,null],[12,"m15","","",175,null],[12,"m25","","",175,null],[12,"m35","","",175,null],[12,"m45","","",175,null],[12,"m55","","",175,null],[12,"m16","","",175,null],[12,"m26","","",175,null],[12,"m36","","",175,null],[12,"m46","","",175,null],[12,"m56","","",175,null],[3,"M6x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",176,null],[12,"m21","","",176,null],[12,"m31","","",176,null],[12,"m41","","",176,null],[12,"m51","","",176,null],[12,"m61","","",176,null],[12,"m12","","",176,null],[12,"m22","","",176,null],[12,"m32","","",176,null],[12,"m42","","",176,null],[12,"m52","","",176,null],[12,"m62","","",176,null],[3,"M6x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",177,null],[12,"m21","","",177,null],[12,"m31","","",177,null],[12,"m41","","",177,null],[12,"m51","","",177,null],[12,"m61","","",177,null],[12,"m12","","",177,null],[12,"m22","","",177,null],[12,"m32","","",177,null],[12,"m42","","",177,null],[12,"m52","","",177,null],[12,"m62","","",177,null],[12,"m13","","",177,null],[12,"m23","","",177,null],[12,"m33","","",177,null],[12,"m43","","",177,null],[12,"m53","","",177,null],[12,"m63","","",177,null],[3,"M6x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",178,null],[12,"m21","","",178,null],[12,"m31","","",178,null],[12,"m41","","",178,null],[12,"m51","","",178,null],[12,"m61","","",178,null],[12,"m12","","",178,null],[12,"m22","","",178,null],[12,"m32","","",178,null],[12,"m42","","",178,null],[12,"m52","","",178,null],[12,"m62","","",178,null],[12,"m13","","",178,null],[12,"m23","","",178,null],[12,"m33","","",178,null],[12,"m43","","",178,null],[12,"m53","","",178,null],[12,"m63","","",178,null],[12,"m14","","",178,null],[12,"m24","","",178,null],[12,"m34","","",178,null],[12,"m44","","",178,null],[12,"m54","","",178,null],[12,"m64","","",178,null],[3,"M6x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",179,null],[12,"m21","","",179,null],[12,"m31","","",179,null],[12,"m41","","",179,null],[12,"m51","","",179,null],[12,"m61","","",179,null],[12,"m12","","",179,null],[12,"m22","","",179,null],[12,"m32","","",179,null],[12,"m42","","",179,null],[12,"m52","","",179,null],[12,"m62","","",179,null],[12,"m13","","",179,null],[12,"m23","","",179,null],[12,"m33","","",179,null],[12,"m43","","",179,null],[12,"m53","","",179,null],[12,"m63","","",179,null],[12,"m14","","",179,null],[12,"m24","","",179,null],[12,"m34","","",179,null],[12,"m44","","",179,null],[12,"m54","","",179,null],[12,"m64","","",179,null],[12,"m15","","",179,null],[12,"m25","","",179,null],[12,"m35","","",179,null],[12,"m45","","",179,null],[12,"m55","","",179,null],[12,"m65","","",179,null],[3,"M6x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",180,null],[12,"m21","","",180,null],[12,"m31","","",180,null],[12,"m41","","",180,null],[12,"m51","","",180,null],[12,"m61","","",180,null],[12,"m12","","",180,null],[12,"m22","","",180,null],[12,"m32","","",180,null],[12,"m42","","",180,null],[12,"m52","","",180,null],[12,"m62","","",180,null],[12,"m13","","",180,null],[12,"m23","","",180,null],[12,"m33","","",180,null],[12,"m43","","",180,null],[12,"m53","","",180,null],[12,"m63","","",180,null],[12,"m14","","",180,null],[12,"m24","","",180,null],[12,"m34","","",180,null],[12,"m44","","",180,null],[12,"m54","","",180,null],[12,"m64","","",180,null],[12,"m15","","",180,null],[12,"m25","","",180,null],[12,"m35","","",180,null],[12,"m45","","",180,null],[12,"m55","","",180,null],[12,"m65","","",180,null],[12,"m16","","",180,null],[12,"m26","","",180,null],[12,"m36","","",180,null],[12,"m46","","",180,null],[12,"m56","","",180,null],[12,"m66","","",180,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"xy"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"xyzw"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"xyzwa"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"xyzwab"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"ijkw"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"m2x2"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"m2x3"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"m2x4"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"m2x5"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"m2x6"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"m3x2"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"m3x3"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"m3x4"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"m3x5"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"m3x6"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"m4x2"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"m4x3"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"m4x4"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",169,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"m4x5"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"m4x6"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"m5x2"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"m5x3"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"m5x4"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",174,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"m5x5"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",175,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"m5x6"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",176,null],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"m6x2"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",177,null],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"m6x3"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",178,null],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"m6x4"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"m6x5"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",180,null],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"m6x6"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"deref","nalgebra::core","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",0,null],[11,"neg","","",0,null],[11,"neg_mut","","Negates `self` in-place.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_mul","","Equivalent to `self.transpose() * right`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixtrmul"}}],[0,"iter","","Matrix iterators.",null,null],[3,"MatrixIter","nalgebra::core::iter","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[3,"MatrixIterMut","","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[11,"new","","Creates a new iterator for the given matrix storage.",181,{"inputs":[{"name":"s"}],"output":{"name":"matrixiter"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[11,"count","","",181,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new iterator for the given matrix storage.",182,{"inputs":[{"name":"s"}],"output":{"name":"matrixitermut"}}],[11,"next","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",182,null],[11,"count","","",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"default_allocator","nalgebra::core","The default matrix data storage allocator.",null,null],[3,"DefaultAllocator","nalgebra::core::default_allocator","An allocator based on `GenericArray` and `MatrixVec` for statically-sized and dynamically-sized matrices respectively.",null,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"clone","nalgebra::core","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"from_data_statically_unchecked","","Creates a new matrix with the given data without statically checking that the matrix dimension matches the storage dimension.",0,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"from_data","","Creates a new matrix with the given data.",0,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"into_owned","","Moves this matrix into one that owns its data.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"into_owned_sum","","Moves this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"clone_owned","","Clones this matrix into one that owns its data.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"clone_owned_sum","","Clones this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"len","","The total number of elements of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shape","","The shape of this matrix returned as the tuple (number of rows, number of columns).",0,null],[11,"nrows","","The number of rows of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strides","","The strides (row stride, column stride) of this matrix.",0,null],[11,"iter","","Iterates through this matrix coordinates.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"vector_to_matrix_index","","Computes the row and column coordinates of the i-th element of this matrix seen as a vector.",0,null],[11,"get_unchecked","","Gets a reference to the element of this matrix at row `irow` and column `icol` without bound-checking.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"relative_eq","","Tests whether `self` and `rhs` are equal up to a given epsilon.",0,null],[11,"iter_mut","","Mutably iterates through this matrix coordinates.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",0,null],[11,"swap","","Swaps two entries.",0,null],[11,"copy_from","","Fills this matrix with the content of another one. Both must have the same shape.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"fill","","Sets all the entries of this matrix to `value`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire matrix entries orderd column-by-columns.",0,null],[11,"as_mut_slice","","Extracts a mutable slice containing the entire matrix entries orderd column-by-columns.",0,null],[11,"map","","Returns a matrix containing the result of `f` applied to each of its entries.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"zip_map","","Returns a matrix containing the result of `f` applied to each entries of `self` and `rhs`.",0,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"transpose","","Transposes `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"transpose_mut","","Transposes the square matrix `self` in-place.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"default_epsilon","","",0,null],[11,"default_max_relative","","",0,null],[11,"default_max_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",0,null],[11,"ulps_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dot","","The dot product between two matrices (seen as vectors).",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"tr_dot","","The dot product between the transpose of `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared L2 norm of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"perp","","The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"cross","","The 3D cross product between two vectors.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixcross"}}],[11,"angle","","The smallest angle between two matrices seen as vectors.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm","","The L2 norm of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Returns a normalized version of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"try_normalize","","Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"normalize_mut","","Normalizes this matrix in-place and returns its norm.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize_mut","","Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"default_epsilon","","",184,null],[11,"default_max_relative","","",184,null],[11,"default_max_ulps","","",184,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",184,null],[11,"ulps_eq","","",184,null],[11,"new_uninitialized_generic","","Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics if `nrows != R::to_usize()` or `ncols != C::to_usize()`.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"from_element_generic","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator_generic","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice. The components must have the same layout as the matrix data storage (i.e. row-major or column-major).",0,null],[11,"from_fn_generic","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity_generic","","Creates a new indentity matrix.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element_generic","","Creates a new matrix with its diagonal filled with copies of `elt`.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_rows","","Builds a new matrix from its rows.",0,null],[11,"from_columns","","Builds a new matrix from its columns.",0,null],[11,"new_random_generic","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",0,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"is_square","","Indicates if this is a square matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Indicated if this is the identity matrix within a relative error of `eps`.",0,null],[11,"identity","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"inverse_mut","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"multiply_by","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",0,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"inner_product","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"orthonormalize","","",0,null],[11,"orthonormal_subspace_basis","","",0,null],[11,"meet","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",0,null],[11,"to_superset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"is_in_subset","","",0,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",0,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[11,"new_unchecked","","Create a new matrix slice without bound checking.",185,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",185,null],[11,"new_unchecked","","Create a new matrix slice without bound checking.",186,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",186,null],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_owned","","",185,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",185,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",185,null],[11,"shape","","",185,null],[11,"strides","","",185,null],[11,"into_owned","","",186,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",186,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",186,null],[11,"shape","","",186,null],[11,"strides","","",186,null],[11,"ptr_mut","","",186,null],[11,"row","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows","","Extracts from this matrix a set of consecutive rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_with_step","","Extracts from this matrix a set of consecutive rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows","","Extracts a compile-time number of consecutive rows from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows_with_step","","Extracts from this matrix a compile-time number of rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_generic","","Extracts from this matrix `nrows` rows regularly spaced by `step` rows. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"rstep"}],"output":{"name":"matrixslice"}}],[11,"column","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns","","Extracts from this matrix a set of consecutive columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_with_step","","Extracts from this matrix a set of consecutive columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns","","Extracts a compile-time number of consecutive columns from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns_with_step","","Extracts from this matrix a compile-time number of columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_generic","","Extracts from this matrix `ncols` columns regularly spaced by `step` columns. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"cstep"}],"output":{"name":"matrixslice"}}],[11,"slice","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",0,null],[11,"slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"fixed_slice","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"generic_slice","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"generic_slice_with_steps","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"row_mut","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_mut","","Extracts from this matrix a set of consecutive rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_with_step_mut","","Extracts from this matrix a set of consecutive rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_mut","","Extracts a compile-time number of consecutive rows from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_with_step_mut","","Extracts from this matrix a compile-time number of rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_generic_mut","","Extracts from this matrix `nrows` rows regularly spaced by `step` rows. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"rstep"}],"output":{"name":"matrixslicemut"}}],[11,"column_mut","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_mut","","Extracts from this matrix a set of consecutive columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_with_step_mut","","Extracts from this matrix a set of consecutive columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_mut","","Extracts a compile-time number of consecutive columns from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_with_step_mut","","Extracts from this matrix a compile-time number of columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_generic_mut","","Extracts from this matrix `ncols` columns regularly spaced by `step` columns. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"cstep"}],"output":{"name":"matrixslicemut"}}],[11,"slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",0,null],[11,"slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"fixed_slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"generic_slice_mut","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"generic_slice_with_steps_mut","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"hash","","",187,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",187,null],[11,"deref_mut","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",187,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",187,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",187,null],[11,"shape","","",187,null],[11,"strides","","",187,null],[11,"ptr_mut","","",187,null],[11,"as_slice","","",187,null],[11,"as_mut_slice","","",187,null],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"matrixvec"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new dynamic matrix data storage from the given vector and shape.",188,{"inputs":[{"name":"r"},{"name":"c"},{"name":"vec"}],"output":{"name":"matrixvec"}}],[11,"data","","The underlying data storage.",188,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"data_mut","","The underlying mutable data storage.",188,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",188,null],[11,"into_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",188,null],[11,"shape","","",188,null],[11,"strides","","",188,null],[11,"into_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",188,null],[11,"shape","","",188,null],[11,"strides","","",188,null],[11,"ptr_mut","","",188,null],[11,"as_slice","","",188,null],[11,"as_mut_slice","","",188,null],[11,"ptr_mut","","",188,null],[11,"as_slice","","",188,null],[11,"as_mut_slice","","",188,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"new_normalize","","Normalize the given value and return it wrapped on a `Unit` structure.",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",184,null],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",184,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",184,null],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",184,null],[11,"new_unchecked","","Wraps the given value, assuming it is already normalized.",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_unchecked","","Returns a mutable reference to the underlying value. This is `_unchecked` because modifying the underlying value in such a way that it no longer has unit length may lead to unexpected results.",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_superset","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",184,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"neg","","",184,null],[11,"deref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"abs","","Computes the componentwise absolute value.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"component_mul","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_mul_mut","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_div_mut","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[6,"OwnedMatrix","","The type of the result of a matrix allocation by the allocator `A`.",null,null],[6,"SquareMatrix","","A square matrix.",null,null],[6,"OwnedSquareMatrix","","The type of the result of a square matrix allocation by the allocator `A`.",null,null],[6,"ColumnVector","","A matrix with one column and `D` rows.",null,null],[6,"OwnedColumnVector","","An owned matrix with one column and `D` rows.",null,null],[6,"OwnedRowVector","","An owned matrix with one row and `D` columns.",null,null],[6,"MatrixSum","","The type of the result of a matrix sum.",null,null],[6,"ColumnVectorSum","","The type of the result of a matrix sum.",null,null],[6,"MatrixCross","","The type of the result of a matrix cross product.",null,null],[6,"MatrixMul","","The type of the result of a matrix multiplication.",null,null],[6,"MatrixTrMul","","The type of the result of a matrix transpose-multiplication.",null,null],[6,"MatrixWithScalar","","The matrix with storage `S` and scalar type changed from `NOld` to `NNew`.",null,null],[6,"DMatrix","","A dynamically sized column-major matrix.",null,null],[6,"MatrixNM","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixN","","A staticaly sized column-major square matrix with `D` rows and columns.",null,null],[6,"Matrix1","","A stack-allocated, column-major, 1x1 square matrix.",null,null],[6,"Matrix2","","A stack-allocated, column-major, 2x2 square matrix.",null,null],[6,"Matrix3","","A stack-allocated, column-major, 3x3 square matrix.",null,null],[6,"Matrix4","","A stack-allocated, column-major, 4x4 square matrix.",null,null],[6,"Matrix5","","A stack-allocated, column-major, 5x5 square matrix.",null,null],[6,"Matrix6","","A stack-allocated, column-major, 6x6 square matrix.",null,null],[6,"Matrix1x2","","A stack-allocated, column-major, 1x2 square matrix.",null,null],[6,"Matrix1x3","","A stack-allocated, column-major, 1x3 square matrix.",null,null],[6,"Matrix1x4","","A stack-allocated, column-major, 1x4 square matrix.",null,null],[6,"Matrix1x5","","A stack-allocated, column-major, 1x5 square matrix.",null,null],[6,"Matrix1x6","","A stack-allocated, column-major, 1x6 square matrix.",null,null],[6,"Matrix2x3","","A stack-allocated, column-major, 2x3 square matrix.",null,null],[6,"Matrix2x4","","A stack-allocated, column-major, 2x4 square matrix.",null,null],[6,"Matrix2x5","","A stack-allocated, column-major, 2x5 square matrix.",null,null],[6,"Matrix2x6","","A stack-allocated, column-major, 2x6 square matrix.",null,null],[6,"Matrix3x4","","A stack-allocated, column-major, 3x4 square matrix.",null,null],[6,"Matrix3x5","","A stack-allocated, column-major, 3x5 square matrix.",null,null],[6,"Matrix3x6","","A stack-allocated, column-major, 3x6 square matrix.",null,null],[6,"Matrix4x5","","A stack-allocated, column-major, 4x5 square matrix.",null,null],[6,"Matrix4x6","","A stack-allocated, column-major, 4x6 square matrix.",null,null],[6,"Matrix5x6","","A stack-allocated, column-major, 5x6 square matrix.",null,null],[6,"Matrix2x1","","A stack-allocated, column-major, 2x1 square matrix.",null,null],[6,"Matrix3x1","","A stack-allocated, column-major, 3x1 square matrix.",null,null],[6,"Matrix4x1","","A stack-allocated, column-major, 4x1 square matrix.",null,null],[6,"Matrix5x1","","A stack-allocated, column-major, 5x1 square matrix.",null,null],[6,"Matrix6x1","","A stack-allocated, column-major, 6x1 square matrix.",null,null],[6,"Matrix3x2","","A stack-allocated, column-major, 3x2 square matrix.",null,null],[6,"Matrix4x2","","A stack-allocated, column-major, 4x2 square matrix.",null,null],[6,"Matrix5x2","","A stack-allocated, column-major, 5x2 square matrix.",null,null],[6,"Matrix6x2","","A stack-allocated, column-major, 6x2 square matrix.",null,null],[6,"Matrix4x3","","A stack-allocated, column-major, 4x3 square matrix.",null,null],[6,"Matrix5x3","","A stack-allocated, column-major, 5x3 square matrix.",null,null],[6,"Matrix6x3","","A stack-allocated, column-major, 6x3 square matrix.",null,null],[6,"Matrix5x4","","A stack-allocated, column-major, 5x4 square matrix.",null,null],[6,"Matrix6x4","","A stack-allocated, column-major, 6x4 square matrix.",null,null],[6,"Matrix6x5","","A stack-allocated, column-major, 6x5 square matrix.",null,null],[6,"DVector","","A dynamically sized column vector.",null,null],[6,"VectorN","","A statically sized D-dimensional column vector.",null,null],[6,"Vector1","","A stack-allocated, 1-dimensional column vector.",null,null],[6,"Vector2","","A stack-allocated, 2-dimensional column vector.",null,null],[6,"Vector3","","A stack-allocated, 3-dimensional column vector.",null,null],[6,"Vector4","","A stack-allocated, 4-dimensional column vector.",null,null],[6,"Vector5","","A stack-allocated, 5-dimensional column vector.",null,null],[6,"Vector6","","A stack-allocated, 6-dimensional column vector.",null,null],[6,"RowDVector","","A dynamically sized row vector.",null,null],[6,"RowVectorN","","A statically sized D-dimensional row vector.",null,null],[6,"RowVector1","","A stack-allocated, 1-dimensional row vector.",null,null],[6,"RowVector2","","A stack-allocated, 2-dimensional row vector.",null,null],[6,"RowVector3","","A stack-allocated, 3-dimensional row vector.",null,null],[6,"RowVector4","","A stack-allocated, 4-dimensional row vector.",null,null],[6,"RowVector5","","A stack-allocated, 5-dimensional row vector.",null,null],[6,"RowVector6","","A stack-allocated, 6-dimensional row vector.",null,null],[6,"MatrixSlice","","A matrix slice.",null,null],[6,"MatrixSliceMut","","A matrix slice.",null,null],[8,"Scalar","","The basic scarar type for all structures of `nalgebra`.",null,null],[0,"geometry","nalgebra","[Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)",null,null],[3,"PointBase","nalgebra::geometry","A point in a n-dimensional euclidean space.",null,null],[12,"coords","","The coordinates of this point, i.e., the shift from the origin.",189,null],[3,"RotationBase","","A rotation matrix.",null,null],[3,"QuaternionBase","","A quaternion. See the type alias `UnitQuaternionBase = Unit<QuaternionBase>` for a quaternion that may be used as a rotation.",null,null],[12,"coords","","This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.",190,null],[3,"TranslationBase","","A translation.",null,null],[12,"vector","","The translation coordinates, i.e., how much is added to a point's coordinates when it is translated.",191,null],[3,"IsometryBase","","A direct isometry, i.e., a rotation followed by a translation.",null,null],[12,"rotation","","The pure rotational part of this isometry.",192,null],[12,"translation","","The pure translational part of this isometry.",192,null],[3,"SimilarityBase","","A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.",null,null],[12,"isometry","","The part of this similarity that does not include the scaling factor.",193,null],[3,"TransformBase","","A transformation matrix in homogeneous coordinates.",null,null],[3,"OrthographicBase","","A 3D orthographic projection stored as an homogeneous 4x4 matrix.",null,null],[3,"PerspectiveBase","","A 3D perspective projection stored as an homogeneous 4x4 matrix.",null,null],[4,"TGeneral","","Tag representing the most general (not necessarily inversible) `Transform` type.",null,null],[4,"TProjective","","Tag representing the most general inversible `Transform` type.",null,null],[4,"TAffine","","Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.",null,null],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_coordinates","","Creates a new point with the given coordinates.",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"pointbase"}}],[11,"into_owned","","Moves this point into one that owns its data.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedpoint"}}],[11,"clone_owned","","Clones this point into one that owns its data.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedpoint"}}],[11,"len","","The dimension of this point.",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stride","","The stride of this point. This is the number of buffer element separating each component of this point.",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Iterates through this point coordinates.",189,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"get_unchecked","","Gets a reference to i-th element of this point without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"to_homogeneous","","Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the end of it.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"iter_mut","","Mutably iterates through this point coordinates.",189,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to i-th element of this point without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"default_epsilon","","",189,null],[11,"default_max_relative","","",189,null],[11,"default_max_ulps","","",189,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",189,null],[11,"ulps_eq","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_uninitialized","","Creates a new point with uninitialized coordinates.",189,{"inputs":[],"output":{"name":"self"}}],[11,"origin","","Creates a new point with all coordinates equal to zero.",189,{"inputs":[],"output":{"name":"self"}}],[11,"from_homogeneous","","Creates a new point from its homogeneous vector representation.",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"max_value","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",189,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"index","","",189,null],[11,"index_mut","","",189,null],[11,"neg","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"add_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"sub_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"sub_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"mul","nalgebra::core","",0,null],[11,"mul","","",0,null],[11,"mul","nalgebra::geometry","",189,null],[11,"mul_assign","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",189,null],[11,"div_assign","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"origin","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"coordinates","","",189,null],[11,"from_coordinates","","",189,null],[11,"scale_by","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"meet","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",189,null],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"pointbase"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"pointbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"pointbase"}],"output":{"name":"self"}}],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",194,null],[11,"matrix","","A reference to the underlying matrix representation of this rotation.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix_mut","","A mutable reference to the underlying matrix representation of this rotation.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Unwraps the underlying matrix.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"to_homogeneous","","Converts this rotation into its equivalent homogeneous transformation matrix.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"from_matrix_unchecked","","Creates a new rotation from the given square matrix.",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"rotationbase"}}],[11,"transpose","","Transposes `self`.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"inverse","","Inverts `self`.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"transpose_mut","","Transposes `self` in-place.",194,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts `self` in-place.",194,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",194,null],[11,"default_max_relative","","",194,null],[11,"default_max_ulps","","",194,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",194,null],[11,"ulps_eq","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",194,{"inputs":[],"output":{"name":"rotationbase"}}],[11,"one","","",194,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","nalgebra::core","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"mul","nalgebra::geometry","",194,null],[11,"mul","","",194,null],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","nalgebra::core","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","nalgebra::geometry","",194,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",194,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",194,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",194,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",194,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",194,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",194,null],[11,"append_translation","","",194,null],[11,"prepend_translation","","",194,null],[11,"append_rotation","","",194,null],[11,"prepend_rotation","","",194,null],[11,"append_scaling","","",194,null],[11,"prepend_scaling","","",194,null],[11,"translation","","",194,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",194,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternionbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",194,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"ownedrotation"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the angle of `self` multiplied by `n`.",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedrotation"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"rand","","",194,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D rotation matrix from an axis scaled by the rotation angle.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D rotation matrix from an axis and a rotation angle.",194,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",194,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","The rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"axis","","The rotation axis. Returns `None` if the rotation angle is zero or PI.",194,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis multiplied by the rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"ownedrotation"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the same axis as `self` and an angle equal to `self.angle()` multiplied by `n`.",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedrotation"}}],[11,"rand","","",194,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","Moves this quaternion into one that owns its data.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"clone_owned","","Clones this quaternion into one that owns its data.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"matrixslice"}}],[11,"scalar","","The scalar part `w` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"as_vector","","Reinterprets this quaternion as a 4D vector.",190,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"norm","","The norm of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared norm of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Normalizes this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"try_inverse","","Inverts this quaternion if it is not zero.",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lerp","","Linear interpolation between two quaternion.",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",190,null],[11,"exp","","Compute the exponential of a quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"powf","","Raise the quaternion to a given floating power.",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"as_vector_mut","","Transforms this quaternion into its 4D vector form (Vector part, Scalar part).",190,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"vector_mut","","The mutable vector part `(i, j, k)` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"matrixslicemut"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",190,{"inputs":[{"name":"self"}],"output":null}],[11,"try_inverse_mut","","Inverts this quaternion in-place if it is not zero.",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize_mut","","Normalizes this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"default_epsilon","","",190,null],[11,"default_max_relative","","",190,null],[11,"default_max_ulps","","",190,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",190,null],[11,"ulps_eq","","",190,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vector","","Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w` vector component.",190,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new quaternion from its individual components. Note that the arguments order does **not** follow the storage order.",190,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts. Note that the arguments order does **not** follow the storage order.",190,{"inputs":[{"name":"n"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",190,{"inputs":[{"name":"n"},{"name":"n"},{"name":"unit"}],"output":{"name":"self"}}],[11,"identity","","The quaternion multiplicative identity.",190,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rand","","",190,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"index","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"add","","",190,null],[11,"add","","",190,null],[11,"sub","","",190,null],[11,"sub","","",190,null],[11,"mul","","",190,null],[11,"mul","","",190,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul","","",190,null],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",190,null],[11,"div_assign","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",190,null],[11,"add_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"add_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"sub_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"sub_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"identity","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"operate","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"multiply_by","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",190,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",190,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"deref","","",190,null],[11,"deref_mut","","",190,null],[11,"to_superset","","",190,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"is_in_subset","","",190,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",190,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"self"}}],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",191,null],[11,"from_vector","","Creates a new translation from the given vector.",191,{"inputs":[{"name":"columnvector"}],"output":{"name":"translationbase"}}],[11,"inverse","","Inverts `self`.",191,{"inputs":[{"name":"self"}],"output":{"name":"ownedtranslation"}}],[11,"to_homogeneous","","Converts this translation into its equivalent homogeneous transformation matrix.",191,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"inverse_mut","","Inverts `self` in-place.",191,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",191,null],[11,"default_max_relative","","",191,null],[11,"default_max_ulps","","",191,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",191,null],[11,"ulps_eq","","",191,null],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",191,{"inputs":[],"output":{"name":"translationbase"}}],[11,"one","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",191,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"div","","",191,null],[11,"div","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"identity","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",191,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",191,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",191,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",191,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",191,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",191,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",191,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",191,null],[11,"append_translation","","",191,null],[11,"prepend_translation","","",191,null],[11,"append_rotation","","",191,null],[11,"prepend_rotation","","",191,null],[11,"append_scaling","","",191,null],[11,"prepend_scaling","","",191,null],[11,"translation","","",191,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rotation","","",191,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"scaling","","",191,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_vector","","",191,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"from_vector","","",191,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"powf","","",191,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation_between","","",191,{"inputs":[{"name":"pointbase"},{"name":"pointbase"}],"output":{"name":"option"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"translationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"translationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"from_parts","","Creates a new isometry from its rotational and translational parts.",192,{"inputs":[{"name":"translationbase"},{"name":"r"}],"output":{"name":"isometrybase"}}],[11,"inverse","","Inverts `self`.",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"inverse_mut","","Inverts `self`.",192,{"inputs":[{"name":"self"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",192,{"inputs":[{"name":"self"},{"name":"r"},{"name":"pointbase"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this isometry into its equivalent homogeneous transformation matrix.",192,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",192,null],[11,"default_max_relative","","",192,null],[11,"default_max_ulps","","",192,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",192,null],[11,"ulps_eq","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity isometry.",192,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity isometry.",192,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",192,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The isometry that applies the rotation `r` with its axis passing through the point `p`. This effectively lets `p` invariant.",192,{"inputs":[{"name":"r"},{"name":"pointbase"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",192,{"inputs":[{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",192,{"inputs":[{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",192,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",192,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"identity","","",192,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",192,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",192,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",192,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",192,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",192,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",192,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",192,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",192,null],[11,"append_translation","","",192,null],[11,"prepend_translation","","",192,null],[11,"append_rotation","","",192,null],[11,"prepend_rotation","","",192,null],[11,"append_scaling","","",192,null],[11,"prepend_scaling","","",192,null],[11,"append_rotation_wrt_point","","",192,null],[11,"translation","","",192,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"rotation","","",192,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",192,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",193,null],[11,"from_parts","","Creates a new similarity from its rotational and translational parts.",193,{"inputs":[{"name":"translationbase"},{"name":"r"},{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"from_isometry","","Creates a new similarity from its rotational and translational parts.",193,{"inputs":[{"name":"isometrybase"},{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"from_scaling","","Creates a new similarity that applies only a scaling factor.",193,{"inputs":[{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"inverse","","Inverts `self`.",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"inverse_mut","","Inverts `self` in-place.",193,{"inputs":[{"name":"self"}],"output":null}],[11,"set_scaling","","The scaling factor of this similarity transformation.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling","","The similarity transformation that applies a scaling factor `scaling` before `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"append_scaling","","The similarity transformation that applies a scaling factor `scaling` after `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"prepend_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",193,{"inputs":[{"name":"self"},{"name":"r"},{"name":"pointbase"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this similarity into its equivalent homogeneous transformation matrix.",193,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"scaling","","The scaling factor of this similarity transformation.",193,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",193,null],[11,"default_max_relative","","",193,null],[11,"default_max_ulps","","",193,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",193,null],[11,"ulps_eq","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity similarity.",193,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity similarity.",193,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",193,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The similarity that applies tha scaling factor `scaling`, followed by the rotation `r` with its axis passing through the point `p`.",193,{"inputs":[{"name":"r"},{"name":"pointbase"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",193,{"inputs":[{"name":"columnvector"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",193,{"inputs":[{"name":"columnvector"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",193,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",193,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"identity","","",193,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",193,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",193,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",193,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",193,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",193,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",193,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",193,null],[11,"append_translation","","",193,null],[11,"prepend_translation","","",193,null],[11,"append_rotation","","",193,null],[11,"prepend_rotation","","",193,null],[11,"append_scaling","","",193,null],[11,"prepend_scaling","","",193,null],[11,"append_rotation_wrt_point","","",193,null],[11,"translation","","",193,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"rotation","","",193,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",193,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"tgeneral"}],"output":{"name":"bool"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"tgeneral"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"tprojective"}],"output":{"name":"bool"}}],[11,"hash","","",196,null],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"tprojective"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"taffine"}],"output":{"name":"bool"}}],[11,"hash","","",197,null],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"taffine"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"check_homogeneous_invariants","","",195,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",196,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"has_normalizer","","",197,{"inputs":[],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",197,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_matrix_unchecked","","Creates a new transformation from the given homogeneous matrix. The transformation category of `Self` is not checked to be verified by the given matrix.",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"into_owned","","Moves this transform into one that owns its data.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"clone_owned","","Clones this transform into one that owns its data.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"unwrap","","The underlying matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix","","A reference to the underlynig matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix_mut_unchecked","","A mutable reference to the underlying matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"set_category","","Sets the category of this transform.",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"to_homogeneous","","Converts this transform into its equivalent homogeneous transformation matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"try_inverse","","Attempts to invert this transformation. You may use `.inverse` instead of this transformation has a subcategory of `TProjective`.",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse","","Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral` category (it may not be invertible).",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"try_inverse_mut","","Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this transformation has a subcategory of `TProjective`.",198,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse_mut","","Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the `TGeneral` category (it may not be invertible).",198,{"inputs":[{"name":"self"}],"output":null}],[11,"matrix_mut","","A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this transformation category is not `TGeneral`.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"identity","","Creates a new identity transform.",198,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity transform.",198,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",198,null],[11,"index_mut","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",191,null],[11,"div","","",191,null],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"identity","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",198,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",198,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",198,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",198,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",198,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",198,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"to_superset","","",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",198,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",198,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"orthographicbase"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new orthographic projection matrix.",199,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D orthographic matrix.",199,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",199,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",199,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the underlying matrix inverse.",199,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",199,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedcolumnvector"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",199,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"perspectivebase"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",200,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D perspective matrix.",200,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",200,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the matrix inverse.",200,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",200,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedcolumnvector"}}],[11,"set_aspect","","Updates this perspective matrix with a new `width / height` aspect ratio of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Updates this perspective with a new y field of view of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this perspective matrix with a new near plane offset of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this perspective matrix with a new far plane offset of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this perspective matrix with new near and far plane offsets of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",200,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[6,"PointSum","","The type of the result of the sum of a point with a vector.",null,null],[6,"PointMul","","The type of the result of the multiplication of a point by a matrix.",null,null],[6,"OwnedPoint","","A point with an owned storage.",null,null],[6,"Point","","A statically sized D-dimensional column point.",null,null],[6,"Point1","","A statically sized 1-dimensional column point.",null,null],[6,"Point2","","A statically sized 2-dimensional column point.",null,null],[6,"Point3","","A statically sized 3-dimensional column point.",null,null],[6,"Point4","","A statically sized 4-dimensional column point.",null,null],[6,"Point5","","A statically sized 5-dimensional column point.",null,null],[6,"Point6","","A statically sized 6-dimensional column point.",null,null],[6,"OwnedRotation","","A rotation matrix with an owned storage.",null,null],[6,"Rotation","","A D-dimensional rotation matrix.",null,null],[6,"Rotation2","","A 2-dimensional rotation matrix.",null,null],[6,"Rotation3","","A 3-dimensional rotation matrix.",null,null],[6,"OwnedQuaternionBase","","A quaternion with an owned storage allocated by `A`.",null,null],[6,"OwnedUnitQuaternionBase","","A unit quaternion with an owned storage allocated by `A`.",null,null],[6,"UnitQuaternionBase","","A unit quaternions. May be used to represent a rotation.",null,null],[6,"Quaternion","","A statically-allocated quaternion.",null,null],[6,"UnitQuaternion","","A statically-allocated unit quaternion.",null,null],[6,"UnitComplex","","A complex number with a norm equal to 1.",null,null],[6,"OwnedTranslation","","A translation with an owned vector storage.",null,null],[6,"Translation","","A D-dimensional translation.",null,null],[6,"Translation2","","A 2-dimensional translation.",null,null],[6,"Translation3","","A 3-dimensional translation.",null,null],[6,"OwnedIsometryBase","","An isometry that uses a data storage deduced from the allocator `A`.",null,null],[6,"Isometry","","A D-dimensional isometry.",null,null],[6,"Isometry2","","A 2-dimensional isometry using a unit complex number for its rotational part.",null,null],[6,"Isometry3","","A 3-dimensional isometry using a unit quaternion for its rotational part.",null,null],[6,"IsometryMatrix2","","A 2-dimensional isometry using a rotation matrix for its rotation part.",null,null],[6,"IsometryMatrix3","","A 3-dimensional isometry using a rotation matrix for its rotation part.",null,null],[6,"OwnedSimilarityBase","","A similarity that uses a data storage deduced from the allocator `A`.",null,null],[6,"Similarity","","A D-dimensional similarity.",null,null],[6,"Similarity2","","A 2-dimensional similarity.",null,null],[6,"Similarity3","","A 3-dimensional similarity.",null,null],[6,"SimilarityMatrix2","","A 2-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"SimilarityMatrix3","","A 3-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"OwnedTransform","","A transformation matrix that owns its data.",null,null],[6,"Transform","","A `D`-dimensional general transformation that may not be inversible. Stored as an homogeneous `(D + 1) × (D + 1)` matrix.",null,null],[6,"Projective","","An inversible `D`-dimensional general transformation. Stored as an homogeneous `(D + 1) × (D + 1)` matrix.",null,null],[6,"Affine","","A `D`-dimensional affine transformation. Stored as an homogeneous `(D + 1) × (D + 1)` matrix.",null,null],[6,"Transform2","","A 2D general transformation that may not be inversible. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Projective2","","An inversible 2D general transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Affine2","","A 2D affine transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Transform3","","A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Projective3","","An inversible 3D general transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Affine3","","A 3D affine transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Orthographic3","","A 3D orthographic projection stored as a static homogeneous 4x4 matrix.",null,null],[6,"Perspective3","","A 3D perspective projection stored as a static homogeneous 4x4 matrix.",null,null],[8,"TCategory","","Trait implemented by phantom types identifying the projective transformation type.",null,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",201,{"inputs":[],"output":{"name":"bool"}}],[10,"check_homogeneous_invariants","","Checks that the given matrix is a valid homogeneous representation of an element of the category `Self`.",201,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[8,"TCategoryMul","","Traits that gives the `Transform` category that is compatible with the result of the multiplication of transformations with categories `Self` and `Other`.",null,null],[16,"Representative","","The transform category that results from the multiplication of a `Transform<Self>` to a `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most general category.",202,null],[8,"SuperTCategoryOf","","Indicates that `Self` is a more general `Transform` category than `Other`.",null,null],[8,"SubTCategoryOf","","Indicates that `Self` is a more specific `Transform` category than `Other`.",null,null],[11,"axpy","nalgebra::core","",0,{"inputs":[{"name":"self"},{"name":"n"},{"name":"self"}],"output":null}],[11,"axpy","nalgebra::geometry","",189,{"inputs":[{"name":"self"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Axpy","nalgebra","Operation that combines scalar multiplication and vector addition.",null,null],[10,"axpy","","Computes `self = a * x + self`.",203,{"inputs":[{"name":"self"},{"name":"a"},{"name":"self"}],"output":null}],[11,"new","","Creates a new identity element.",204,{"inputs":[],"output":{"name":"id"}}],[11,"one","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"identity","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"inverse","","",204,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"inverse_mut","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"meet","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"decompose","","",204,null],[11,"append_translation","","",204,null],[11,"prepend_translation","","",204,null],[11,"append_rotation","","",204,null],[11,"prepend_rotation","","",204,null],[11,"append_scaling","","",204,null],[11,"prepend_scaling","","",204,null],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"add_assign","","",204,null],[11,"to_superset","","",204,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",204,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",204,{"inputs":[{"name":"t"}],"output":{"name":"id"}}],[11,"translation","","",204,null],[11,"rotation","","",204,null],[11,"scaling","","",204,null],[11,"operate","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"default_epsilon","","",204,null],[11,"default_max_relative","","",204,null],[11,"default_max_ulps","","",204,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",204,null],[11,"ulps_eq","","",204,null],[11,"zero","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"is_zero","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"div_assign","","",204,null],[11,"transform_point","","",204,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",204,null],[11,"powf","","",204,null],[11,"rotation_between","","",204,null],[11,"scaled_rotation_between","","",204,null],[11,"to_vector","","",204,null],[11,"from_vector","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"join","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"inverse_transform_point","","",204,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",204,null],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"mul_assign","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"diagonal","nalgebra::core","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",205,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"to_homogeneous","","Computes the coordinates in projective space of this vector, i.e., appends a `0` to its coordinates.",206,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"from_homogeneous","","Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of `self`. Returns `None` if this last component is not zero.",206,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"from_diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"x","","The column vector with a 1 as its first component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"y","","The column vector with a 1 as its second component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"z","","The column vector with a 1 as its third component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"w","","The column vector with a 1 as its fourth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"a","","The column vector with a 1 as its fifth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"b","","The column vector with a 1 as its sixth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"x_axis","","The unit column vector with a 1 as its first component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"y_axis","","The unit column vector with a 1 as its second component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"z_axis","","The unit column vector with a 1 as its third component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"w_axis","","The unit column vector with a 1 as its fourth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"a_axis","","The unit column vector with a 1 as its fifth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"b_axis","","The unit column vector with a 1 as its sixth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"is_orthogonal","","Checks that this matrix is orthogonal, i.e., that it is square and `M × Mᵀ = Id`.",205,null],[11,"is_special_orthogonal","","Checks that this matrix is orthogonal and has a determinant equal to 1.",205,null],[11,"is_invertible","","Returns `true` if this matrix is invertible.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"identity","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",205,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"determinant","","This matrix determinant.",205,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_inverse","","Attempts to invert this matrix.",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_inverse_mut","","Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if inversion fails.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_scaling","","Creates a new homogeneous matrix that applies the same scaling factor on each dimension.",205,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_nonuniform_scaling","","Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_translation","","Creates a new homogeneous matrix that applies a pure translation.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.",205,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_rotation_wrt_point","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"},{"name":"ownedpoint"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.",205,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_orthographic","","Creates a new homogeneous matrix for an orthographic projection.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_perspective","","Creates a new homogeneous matrix for a perspective projection.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"append_scaling","","Computes the transformation equal to `self` followed by an uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_scaling","","Computes the transformation equal to an uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_nonuniform_scaling","","Computes the transformation equal to `self` followed by a non-uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_nonuniform_scaling","","Computes the transformation equal to a non-uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_translation","","Computes the transformation equal to `self` followed by a translation.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_translation","","Computes the transformation equal to a translation followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_scaling_mut","","Computes in-place the transformation equal to `self` followed by an uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling_mut","","Computes in-place the transformation equal to an uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_nonuniform_scaling_mut","","Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"prepend_nonuniform_scaling_mut","","Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"append_translation_mut","","Computes the transformation equal to `self` followed by a translation.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"prepend_translation_mut","","Computes the transformation equal to a translation followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"transform_vector","","",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"transform_point","","",205,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"new_householder_generic","","Get the householder matrix corresponding to a reflexion to the hyperplane defined by `vector`. It can be a reflexion contained in a subspace.",205,{"inputs":[{"name":"d"},{"name":"usize"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"qr","","QR decomposition using Householder reflections.",205,null],[11,"eig","","Eigendecomposition of a square symmetric matrix.",205,null],[11,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cholesky_unchecked","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"hessenberg","","Hessenberg Returns the matrix `self` in Hessenberg form and the corresponding similarity transformation",205,null],[11,"into_owned","nalgebra::geometry","Moves this unit quaternion into one that owns its data.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"angle","","The rotation angle in [0; pi] of this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"quaternion","","The underlying quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"conjugate","","Compute the conjugate of this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"inverse","","Inverts this quaternion if it is not zero.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit quaternion needed to make `self` and `other` coincide.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"lerp","","Linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"nlerp","","Normalized linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"slerp","","Spherical linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"try_slerp","","Computes the spherical linear interpolation between two unit quaternions or returns `None` if both quaternions are approximately 180 degrees apart (in which case the interpolation is not well-defined).",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"conjugate_mut","","Compute the conjugate of this unit quaternion in-place.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts this quaternion if it is not zero.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",207,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis of this unit quaternion multiplied by the rotation agle.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"exp","","Compute the exponential of a quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"powf","","Raise the quaternion to a given floating power.",207,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"to_homogeneous","","Converts this unit quaternion into its equivalent homogeneous transformation matrix.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",207,null],[11,"default_max_relative","","",207,null],[11,"default_max_ulps","","",207,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",207,null],[11,"ulps_eq","","",207,null],[11,"identity","","The quaternion multiplicative identity.",207,{"inputs":[],"output":{"name":"self"}}],[11,"from_axis_angle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",207,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",207,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",207,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds an unit quaternion from a rotation matrix.",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"new_observer_frame","","Creates an unit quaternion that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",207,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",207,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"one","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",207,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",207,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",207,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",207,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",207,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",207,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",207,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",207,null],[11,"append_translation","","",207,null],[11,"prepend_translation","","",207,null],[11,"append_rotation","","",207,null],[11,"prepend_rotation","","",207,null],[11,"append_scaling","","",207,null],[11,"prepend_scaling","","",207,null],[11,"translation","","",207,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",207,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",207,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",207,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternionbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle in `]-pi; pi]` of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",208,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"complex","","The underlying complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"conjugate","","Compute the conjugate of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","Inverts this complex number if it is not zero.",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit complex number needed to make `self` and `other` coincide.",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"conjugate_mut","","Compute in-place the conjugate of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts in-place this unit complex number.",208,{"inputs":[{"name":"self"}],"output":null}],[11,"powf","","Raise this unit complex number to a given floating power.",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"to_rotation_matrix","","Builds the rotation matrix corresponding to this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"to_homogeneous","","Converts this unit complex number into its equivalent homogeneous transformation matrix.",208,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",208,null],[11,"default_max_relative","","",208,null],[11,"default_max_ulps","","",208,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",208,null],[11,"ulps_eq","","",208,null],[11,"identity","","The unit complex number multiplicative identity.",208,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Builds the unit complex number corresponding to the rotation with the angle.",208,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_angle","","Builds the unit complex number corresponding to the rotation with the angle.",208,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.",208,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_complex","","Creates a new unit complex number from a complex number.",208,{"inputs":[{"name":"complex"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds the unit complex number from the corresponding 2D rotation matrix.",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"one","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",208,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"div","","",208,null],[11,"div","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",208,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",208,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",208,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",208,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",208,null],[11,"append_translation","","",208,null],[11,"prepend_translation","","",208,null],[11,"append_rotation","","",208,null],[11,"prepend_rotation","","",208,null],[11,"append_scaling","","",208,null],[11,"prepend_scaling","","",208,null],[11,"translation","","",208,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",208,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",201,{"inputs":[],"output":{"name":"bool"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null]],"paths":[[3,"Matrix"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimName"],[8,"NamedDim"],[3,"Dynamic"],[3,"U1"],[3,"U0"],[3,"U2"],[3,"U3"],[3,"U4"],[3,"U5"],[3,"U6"],[3,"U7"],[3,"U8"],[3,"U9"],[3,"U10"],[3,"U11"],[3,"U12"],[3,"U13"],[3,"U14"],[3,"U15"],[3,"U16"],[3,"U17"],[3,"U18"],[3,"U19"],[3,"U20"],[3,"U21"],[3,"U22"],[3,"U23"],[3,"U24"],[3,"U25"],[3,"U26"],[3,"U27"],[3,"U28"],[3,"U29"],[3,"U30"],[3,"U31"],[3,"U32"],[3,"U33"],[3,"U34"],[3,"U35"],[3,"U36"],[3,"U37"],[3,"U38"],[3,"U39"],[3,"U40"],[3,"U41"],[3,"U42"],[3,"U43"],[3,"U44"],[3,"U45"],[3,"U46"],[3,"U47"],[3,"U48"],[3,"U49"],[3,"U50"],[3,"U51"],[3,"U52"],[3,"U53"],[3,"U54"],[3,"U55"],[3,"U56"],[3,"U57"],[3,"U58"],[3,"U59"],[3,"U60"],[3,"U61"],[3,"U62"],[3,"U63"],[3,"U64"],[3,"U65"],[3,"U66"],[3,"U67"],[3,"U68"],[3,"U69"],[3,"U70"],[3,"U71"],[3,"U72"],[3,"U73"],[3,"U74"],[3,"U75"],[3,"U76"],[3,"U77"],[3,"U78"],[3,"U79"],[3,"U80"],[3,"U81"],[3,"U82"],[3,"U83"],[3,"U84"],[3,"U85"],[3,"U86"],[3,"U87"],[3,"U88"],[3,"U89"],[3,"U90"],[3,"U91"],[3,"U92"],[3,"U93"],[3,"U94"],[3,"U95"],[3,"U96"],[3,"U97"],[3,"U98"],[3,"U99"],[3,"U100"],[3,"U101"],[3,"U102"],[3,"U103"],[3,"U104"],[3,"U105"],[3,"U106"],[3,"U107"],[3,"U108"],[3,"U109"],[3,"U110"],[3,"U111"],[3,"U112"],[3,"U113"],[3,"U114"],[3,"U115"],[3,"U116"],[3,"U117"],[3,"U118"],[3,"U119"],[3,"U120"],[3,"U121"],[3,"U122"],[3,"U123"],[3,"U124"],[3,"U125"],[3,"U126"],[3,"U127"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[8,"Allocator"],[8,"Storage"],[8,"StorageMut"],[8,"OwnedStorage"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"DefaultAllocator"],[3,"Unit"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"MatrixArray"],[3,"MatrixVec"],[3,"PointBase"],[3,"QuaternionBase"],[3,"TranslationBase"],[3,"IsometryBase"],[3,"SimilarityBase"],[3,"RotationBase"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"TransformBase"],[3,"OrthographicBase"],[3,"PerspectiveBase"],[8,"TCategory"],[8,"TCategoryMul"],[8,"Axpy"],[3,"Id"],[6,"SquareMatrix"],[6,"ColumnVector"],[6,"UnitQuaternionBase"],[6,"UnitComplex"]]};
initSearch(searchIndex);
